{"version":3,"sources":["../src/layers/regions.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAGH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAC/B,2CAA6C;AAkB7C,IAAa,WAAW;IAAS,uCAAsC;IADvE;QAAA,qEAwBC;QAVW,kBAAY,GAAG,UAAC,MAAe,EAAE,KAAa;YAC5C,IAAA,gBAA0C,EAAxC,wBAAS,EAAE,kCAAc,CAAgB;YACjD,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,EAC7E,GAAG,EAAE,KAAK,EACV,KAAK,EAAE,cAAc,CAAC,MAAM,CAAC,GAC/B,CACL,CAAC;QACN,CAAC,CAAA;;IACL,CAAC;IAtBU,4BAAM,GAAb;QACI,MAAM,CAAC,6BAAK,SAAS,EAAE,OAAO,CAAC,mBAAmB,IAAG,IAAI,CAAC,oBAAoB,EAAE,CAAO,CAAC;IAC5F,CAAC;IAEO,0CAAoB,GAA5B;QACY,IAAA,4BAAO,CAAgB;QAC/B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAYL,kBAAC;AAAD,CAvBA,AAuBC,CAvBgC,KAAK,CAAC,SAAS,GAuB/C;AAvBY,WAAW;IADvB,UAAU;GACE,WAAW,CAuBvB;AAvBY,kCAAW","file":"layers/regions.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { IRegion } from \"../regions\";\n\nexport type IRegionStyler = (region: IRegion) => React.CSSProperties;\n\nexport interface IRegionLayerProps extends IProps {\n    /**\n     * The array of regions to render.\n     */\n    regions?: IRegion[];\n\n    /**\n     * A callback interface for applying CSS styles to the regions.\n     */\n    getRegionStyle: IRegionStyler;\n}\n\n@PureRender\nexport class RegionLayer extends React.Component<IRegionLayerProps, {}> {\n    public render() {\n        return <div className={Classes.TABLE_OVERLAY_LAYER}>{this.renderRegionChildren()}</div>;\n    }\n\n    private renderRegionChildren() {\n        const { regions } = this.props;\n        if (regions == null) {\n            return undefined;\n        }\n        return regions.map(this.renderRegion);\n    }\n\n    private renderRegion = (region: IRegion, index: number) => {\n        const { className, getRegionStyle } = this.props;\n        return (\n            <div\n                className={classNames(Classes.TABLE_OVERLAY, Classes.TABLE_REGION, className)}\n                key={index}\n                style={getRegionStyle(region)}\n            />\n        );\n    }\n}\n"]}