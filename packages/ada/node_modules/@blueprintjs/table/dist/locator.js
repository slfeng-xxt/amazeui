/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Classes = require("./common/classes");
var rect_1 = require("./common/rect");
var utils_1 = require("./common/utils");
var Locator = (function () {
    function Locator(tableElement, bodyElement, grid) {
        var _this = this;
        this.tableElement = tableElement;
        this.bodyElement = bodyElement;
        this.grid = grid;
        this.convertCellIndexToClientX = function (index) {
            var bodyRect = _this.getBodyRect();
            return bodyRect.left + _this.grid.getCumulativeWidthAt(index);
        };
        this.convertCellIndexToClientY = function (index) {
            var bodyRect = _this.getBodyRect();
            return bodyRect.top + _this.grid.getCumulativeHeightAt(index);
        };
    }
    Locator.prototype.setGrid = function (grid) {
        this.grid = grid;
    };
    Locator.prototype.getViewportRect = function () {
        return new rect_1.Rect(this.bodyElement.scrollLeft, this.bodyElement.scrollTop, this.bodyElement.clientWidth, this.bodyElement.clientHeight);
    };
    Locator.prototype.getWidestVisibleCellInColumn = function (columnIndex) {
        var cellClasses = [
            "." + Classes.columnCellIndexClass(columnIndex),
            "." + Classes.TABLE_COLUMN_NAME,
        ];
        var cells = this.tableElement.querySelectorAll(cellClasses.join(", "));
        var max = 0;
        for (var i = 0; i < cells.length; i++) {
            var contentWidth = utils_1.Utils.measureElementTextContent(cells.item(i)).width;
            var cellWidth = Math.ceil(contentWidth) + Locator.CELL_HORIZONTAL_PADDING * 2;
            if (cellWidth > max) {
                max = cellWidth;
            }
        }
        return max;
    };
    Locator.prototype.convertPointToColumn = function (clientX) {
        var tableRect = this.getTableRect();
        if (!tableRect.containsX(clientX)) {
            return -1;
        }
        return utils_1.Utils.binarySearch(clientX, this.grid.numCols - 1, this.convertCellIndexToClientX);
    };
    Locator.prototype.convertPointToRow = function (clientY) {
        var tableRect = this.getTableRect();
        if (!tableRect.containsY(clientY)) {
            return -1;
        }
        return utils_1.Utils.binarySearch(clientY, this.grid.numRows - 1, this.convertCellIndexToClientY);
    };
    Locator.prototype.convertPointToCell = function (clientX, clientY) {
        var col = utils_1.Utils.binarySearch(clientX, this.grid.numCols - 1, this.convertCellIndexToClientX);
        var row = utils_1.Utils.binarySearch(clientY, this.grid.numRows - 1, this.convertCellIndexToClientY);
        return { col: col, row: row };
    };
    Locator.prototype.getTableRect = function () {
        return rect_1.Rect.wrap(this.tableElement.getBoundingClientRect());
    };
    Locator.prototype.getBodyRect = function () {
        return this.unscrollElementRect(this.bodyElement);
    };
    /**
     * Subtracts the scroll offset from the element's bounding client rect.
     */
    Locator.prototype.unscrollElementRect = function (element) {
        var rect = rect_1.Rect.wrap(element.getBoundingClientRect());
        rect.left -= element.scrollLeft;
        rect.top -= element.scrollTop;
        return rect;
    };
    return Locator;
}());
Locator.CELL_HORIZONTAL_PADDING = 10;
exports.Locator = Locator;

//# sourceMappingURL=locator.js.map
