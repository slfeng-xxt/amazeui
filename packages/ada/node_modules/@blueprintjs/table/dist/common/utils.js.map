{"version":3,"sources":["../src/common/utils.ts"],"names":[],"mappings":"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","file":"common/utils.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\n/**\n * Re-declare matching types from the classnames library;\n */\nexport type ClassValue = string | number | ClassDictionary | ClassArray;\n\n// tslint:disable interface-name no-empty-interface\nexport interface ClassDictionary {\n    [id: string]: boolean;\n}\n\nexport interface ClassArray extends Array<ClassValue> {};\n// tslint:enable\n\n/**\n * Since Firefox doesn't provide a computed \"font\" property, we manually\n * construct it using the ordered properties that can be specifed in CSS.\n */\nconst CSS_FONT_PROPERTIES = [\n    \"font-style\",\n    \"font-variant\",\n    \"font-weight\",\n    \"font-size\",\n    \"font-family\",\n];\n\nexport const Utils = {\n    /**\n     * Returns a clone of the ReactElement with a className that includes the\n     * element's original className and any other classes passed in with variadic\n     * arguments matching the `classNames` api.\n     */\n    assignClasses<P extends IProps>(elem: React.ReactElement<P>, ...extendedClasses: ClassValue[]) {\n        const classes = classNames(elem.props.className, ...extendedClasses);\n        return React.cloneElement(elem, {className : classes} as IProps);\n    },\n\n    /**\n     * Invokes the callback `n` times, collecting the results in an array, which\n     * is the return value. Similar to _.times\n     */\n    times<T>(n: number, callback: (i: number) => T): T[] {\n        return Array.apply(null, Array(n)).map((_none: any, index: number) => callback(index));\n    },\n\n    /**\n     * Takes an array of numbers, returns an array of numbers of the same length in which each\n     * value is the sum of current and previous values in the input array.\n     *\n     * Example input:  [10, 20, 50]\n     *         output: [10, 30, 80]\n     */\n    accumulate(numbers: number[]) {\n        const result: number[] = [];\n        let sum = 0;\n        for (const num of numbers) {\n            sum += num;\n            result.push(sum);\n        }\n        return result;\n    },\n\n    /**\n     * Returns traditional spreadsheet-style column names\n     * e.g. (A, B, ..., Z, AA, AB, ..., ZZ, AAA, AAB, ...).\n     *\n     * Note that this isn't technically mathematically equivalent to base 26 since\n     * there is no zero element.\n     */\n    toBase26Alpha(num: number) {\n        let str = \"\";\n        while (true) {\n            const letter = num % 26;\n            str = String.fromCharCode(65 + letter) + str;\n            num = num - letter;\n            if (num <= 0) {\n                return str;\n            }\n            num = (num / 26) - 1;\n        }\n    },\n\n    /**\n     * Performs the binary search algorithm to find the index of the `value`\n     * parameter in a sorted list of numbers. If `value` is not in the list, the\n     * index where `value` can be inserted to maintain the sort is returned.\n     *\n     * Unlike a typical binary search implementation, we use a `lookup`\n     * callback to access the sorted list of numbers instead of an array. This\n     * avoids additional storage overhead.\n     *\n     * We use this to, for example, find the index of a row/col given its client\n     * coordinate.\n     *\n     * Adapted from lodash https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L3579\n     *\n     * @param value - the query value\n     * @param high - the length of the sorted list of numbers\n     * @param lookup - returns the number from the list at the supplied index\n     */\n    binarySearch(value: number, high: number, lookup: (index: number) => number): number {\n        let low = 0;\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2.0);\n            const computed = lookup(mid);\n            if (computed < value) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    },\n\n    /**\n     * Returns a copy of the array that will have a length of the supplied parameter.\n     * If the array is too long, it will be truncated. If it is too short, it will be\n     * filled with the suppleid `fillValue` argument.\n     *\n     * @param array - the `Array` to copy and adjust\n     * @param length - the target length of the array\n     * @param fillValue - the value to add to the array if it is too short\n     */\n    arrayOfLength<T>(array: T[], length: number, fillValue: T): T[] {\n        if (array.length > length) {\n            return array.slice(0, length);\n        }\n\n        array = array.slice();\n        while (array.length < length) {\n            array.push(fillValue);\n        }\n        return array;\n    },\n\n    /**\n     * Takes in one full array of values and one sparse array of the same\n     * length and type. Returns a copy of the `defaults` array, where each\n     * value is replaced with the corresponding non-null value at the same\n     * index in `sparseOverrides`.\n     *\n     * @param defaults - the full array of default values\n     * @param sparseOverrides - the sparse array of override values\n     */\n    assignSparseValues<T>(defaults: T[], sparseOverrides: T[]) {\n        if (sparseOverrides == null || defaults.length !== sparseOverrides.length) {\n            return defaults;\n        }\n\n        defaults = defaults.slice();\n        for (let i = 0; i < defaults.length; i++) {\n            const override = sparseOverrides[i];\n            if (override != null) {\n                defaults[i] = override;\n            }\n        }\n        return defaults;\n    },\n\n    /**\n     * Measures the bounds of supplied element's textContent.\n     *\n     * We use the computed font from the supplied element and a non-DOM canvas\n     * context to measure the text.\n     *\n     * Returns a `TextMetrics` object.\n     */\n    measureElementTextContent(element: Element) {\n        const context = document.createElement(\"canvas\").getContext(\"2d\");\n        const style = getComputedStyle(element, null);\n        context.font = CSS_FONT_PROPERTIES.map((prop) => style.getPropertyValue(prop)).join(\" \");\n        return context.measureText(element.textContent);\n    },\n\n    /**\n     * Given a number, returns a value that is clamped within a\n     * minimum/maximum bounded range. The minimum and maximum are optional. If\n     * either is missing, that extrema limit is not applied.\n     *\n     * Assumes max >= min.\n     */\n    clamp(value: number, min?: number, max?: number) {\n        if (min != null && value < min) {\n            value = min;\n        }\n        if (max != null && value > max) {\n            value = max;\n        }\n        return value;\n    },\n\n    /**\n     * Partial shallow comparison between objects using the given list of keys.\n     */\n    shallowCompareKeys(objA: any, objB: any, keys: string[]) {\n        for (const key of keys) {\n            if (objA[key] !== objB[key]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n};\n"]}