{"version":3,"sources":["../src/common/loadableContent.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,6BAA+B;AAE/B,0CAA4C;AAgB5C,iDAAiD;AACjD;IAAqC,2CAA0C;IAG3E,yBAAmB,KAA4B;QAA/C,YACI,kBAAM,KAAK,CAAC,SAEf;QADG,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;;IAC3D,CAAC;IAEM,mDAAyB,GAAhC,UAAiC,SAAgC;QAC7D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;YACrG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC/D,CAAC;IACL,CAAC;IAEM,gCAAM,GAAb;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,6BAAK,SAAS,EAAE,cAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,GAAI,CAAC;QACnE,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEO,wCAAc,GAAtB,UAAuB,cAAuB;QAC1C,IAAM,cAAc,GAAG,cAAc,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACtF,MAAM,CAAC,EAAE,KAAK,EAAK,cAAc,MAAG,EAAE,CAAC;IAC3C,CAAC;IACL,sBAAC;AAAD,CA1BA,AA0BC,CA1BoC,KAAK,CAAC,SAAS,GA0BnD;AA1BY,0CAAe","file":"common/loadableContent.js","sourcesContent":["/**\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\n\nimport { Classes } from \"@blueprintjs/core\";\n\nexport interface ILoadableContentProps {\n    /**\n     * If true, render a skeleton. Otherwise render the single, non-string child passed to this\n     * component.\n     */\n    loading: boolean;\n\n    /**\n     * If true, show a skeleton of random width (25-75% cell width) when rendering the loading state.\n     * @default false\n     */\n    variableLength?: boolean;\n}\n\n// This class expects a single, non-string child.\nexport class LoadableContent extends React.Component<ILoadableContentProps, {}> {\n    private style: React.CSSProperties;\n\n    public constructor(props: ILoadableContentProps) {\n        super(props);\n        this.style = this.calculateStyle(props.variableLength);\n    }\n\n    public componentWillReceiveProps(nextProps: ILoadableContentProps) {\n        if (!this.props.loading && nextProps.loading || this.props.variableLength !== nextProps.variableLength) {\n            this.style = this.calculateStyle(nextProps.variableLength);\n        }\n    }\n\n    public render() {\n        if (this.props.loading) {\n            return <div className={Classes.SKELETON} style={this.style} />;\n        }\n\n        return React.Children.only(this.props.children);\n    }\n\n    private calculateStyle(variableLength: boolean) {\n        const skeletonLength = variableLength ? 75 - Math.floor(Math.random() * 11) * 5 : 100;\n        return { width: `${skeletonLength}%` };\n    }\n}\n"]}