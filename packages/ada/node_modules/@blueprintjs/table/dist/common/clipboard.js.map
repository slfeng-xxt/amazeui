{"version":3,"sources":["../src/common/clipboard.ts"],"names":[],"mappings":"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","file":"common/clipboard.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\n/* istanbul ignore next */\n\nexport const Clipboard = {\n    /**\n     * Overrides the inherited CSS of the element to make sure it is\n     * selectable. This method also makes the element pseudo-invisible.\n     */\n    applySelectableStyles(elem: HTMLElement) {\n        elem.style.overflow = \"hidden\";\n        elem.style.height = \"0px\";\n        elem.style.setProperty(\"-webkit-user-select\", \"all\");\n        elem.style.setProperty(\"-moz-user-select\", \"all\");\n        elem.style.setProperty(\"-ms-user-select\", \"all\");\n        elem.style.setProperty(\"user-select\", \"all\");\n        return elem;\n    },\n\n    /**\n     * Copies table cells to the clipboard. The parameter is a row-major\n     * 2-dimensional `Array` of strings and can contain nulls. We assume all\n     * rows are the same length. If not, the cells will still be copied, but\n     * the columns may not align. Returns a boolean indicating whether the\n     * copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyCells(cells: string[][]) {\n        const table = document.createElement(\"table\");\n        Clipboard.applySelectableStyles(table);\n        for (const row of cells) {\n            const tr = table.appendChild(document.createElement(\"tr\"));\n            for (const cell of row) {\n                const td = tr.appendChild(document.createElement(\"td\"));\n                td.textContent = cell;\n            }\n        }\n\n        const tsv = cells.map((row) => row.join(\"\\t\")).join(\"\\n\");\n        return Clipboard.copyElement(table, tsv);\n    },\n\n    /**\n     * Copies the text to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyString(value: string) {\n        const text = document.createElement(\"textarea\");\n        Clipboard.applySelectableStyles(text);\n        text.value = value;\n\n        return Clipboard.copyElement(text, value);\n    },\n\n    /**\n     * Copies the element and its children to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * If a plaintext argument is supplied, we add both the text/html and\n     * text/plain mime types to the clipboard. This preserves the built in\n     * semantics of copying elements to the clipboard while allowing custom\n     * plaintext output for programs that can't cope with HTML data in the\n     * clipboard.\n     *\n     * Verified on Firefox 47, Chrome 51.\n     *\n     * Note: Sometimes the copy does not succeed. Presumably, in order to\n     * prevent memory issues, browsers will limit the total amount of data you\n     * can copy to the clipboard. Based on ad hoc testing, we found an\n     * inconsistent limit at about 300KB or 40,000 cells. Depending on the on\n     * the content of cells, your limits may vary.\n     */\n    copyElement(elem: HTMLElement, plaintext?: string) {\n        if (!Clipboard.isCopySupported()) {\n            return false;\n        }\n\n        // must be document.body instead of document.documentElement for firefox\n        document.body.appendChild(elem);\n        try {\n            window.getSelection().selectAllChildren(elem);\n\n            if (plaintext != null) {\n                // add plaintext fallback\n                // http://stackoverflow.com/questions/23211018/copy-to-clipboard-with-jquery-js-in-chrome\n                elem.addEventListener(\"copy\", (e: UIEvent) => {\n                    e.preventDefault();\n                    const clipboardData = (e as any).clipboardData || (window as any).clipboardData;\n                    if (clipboardData != null) {\n                        clipboardData.setData(\"text/html\", elem.outerHTML);\n                        clipboardData.setData(\"text/plain\", plaintext);\n                    }\n                });\n            }\n\n            return document.execCommand(\"copy\");\n        } catch (err) {\n            return false;\n        } finally {\n            document.body.removeChild(elem);\n        }\n    },\n\n    /**\n     * Returns a boolean indicating whether the current browser nominally\n     * supports the `copy` operation using the `execCommand` API.\n     */\n    isCopySupported() {\n        return document.queryCommandSupported != null && document.queryCommandSupported(\"copy\");\n    },\n};\n"]}