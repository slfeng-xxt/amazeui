{"version":3,"sources":["../src/table.tsx"],"names":[],"mappings":"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","file":"table.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { AbstractComponent, IProps, Utils as BlueprintUtils } from \"@blueprintjs/core\";\nimport { Hotkey, Hotkeys, HotkeysTarget } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport { ICellProps } from \"./cell/cell\";\nimport { Column, IColumnProps } from \"./column\";\nimport { IFocusedCellCoordinates } from \"./common/cell\";\nimport * as Classes from \"./common/classes\";\nimport { Clipboard } from \"./common/clipboard\";\nimport { Grid } from \"./common/grid\";\nimport { Rect } from \"./common/rect\";\nimport { Utils } from \"./common/utils\";\nimport { ColumnHeader, IColumnWidths } from \"./headers/columnHeader\";\nimport { ColumnHeaderCell, IColumnHeaderCellProps } from \"./headers/columnHeaderCell\";\nimport { IRowHeaderRenderer, IRowHeights, renderDefaultRowHeader, RowHeader } from \"./headers/rowHeader\";\nimport { IContextMenuRenderer } from \"./interactions/menus\";\nimport { IIndexedResizeCallback } from \"./interactions/resizable\";\nimport { ResizeSensor } from \"./interactions/resizeSensor\";\nimport { ISelectedRegionTransform } from \"./interactions/selectable\";\nimport { GuideLayer } from \"./layers/guides\";\nimport { IRegionStyler, RegionLayer } from \"./layers/regions\";\nimport { Locator } from \"./locator\";\nimport {\n    ColumnLoadingOption,\n    IRegion,\n    IStyledRegionGroup,\n    RegionCardinality,\n    Regions,\n    SelectionModes,\n    TableLoadingOption,\n} from \"./regions\";\nimport { TableBody } from \"./tableBody\";\n\nexport interface ITableProps extends IProps, IRowHeights, IColumnWidths {\n    /**\n     * If `true`, there will be a single \"focused\" cell at all times,\n     * which can be used to interact with the table as though it is a\n     * spreadsheet. When false, no such cell will exist.\n     * @default false\n     */\n    enableFocus?: boolean;\n\n    /**\n     * If `false`, only a single region of a single column/row/cell may be\n     * selected at one time. Using `ctrl` or `meta` key will have no effect,\n     * and a mouse drag will select the current column/row/cell only.\n     * @default true\n     */\n    allowMultipleSelection?: boolean;\n\n    /**\n     * The children of a `Table` component, which must be React elements\n     * that use `IColumnProps`.\n     */\n    children?: React.ReactElement<IColumnProps>;\n\n    /**\n     * If `true`, empty space in the table container will be filled with empty\n     * cells instead of a blank background.\n     * @default false\n     */\n    fillBodyWithGhostCells?: boolean;\n\n    /**\n     * If defined, this callback will be invoked for each cell when the user\n     * attempts to copy a selection via `mod+c`. The returned data will be copied\n     * to the clipboard and need not match the display value of the `<Cell>`.\n     * The data will be invisibly added as `textContent` into the DOM before\n     * copying. If not defined, keyboard copying via `mod+c` will be disabled.\n     */\n    getCellClipboardData?: (row: number, col: number) => any;\n\n    /**\n     * If `false`, disables resizing of columns.\n     * @default true\n     */\n    isColumnResizable?: boolean;\n\n    /**\n     * A list of `TableLoadingOption`. Set this prop to specify whether to\n     * render the loading state for the column header, row header, and body\n     * sections of the table.\n     */\n    loadingOptions?: TableLoadingOption[];\n\n    /**\n     * If resizing is enabled, this callback will be invoked when the user\n     * finishes drag-resizing a column.\n     */\n    onColumnWidthChanged?: IIndexedResizeCallback;\n\n    /**\n     * A sparse number array with a length equal to the number of columns. Any\n     * non-null value will be used to set the width of the column at the same\n     * index. Note that if you want to update these values when the user\n     * drag-resizes a column, you may define a callback for `onColumnWidthChanged`.\n     */\n    columnWidths?: Array<number | null | undefined>;\n\n    /**\n     * If `false`, disables resizing of rows.\n     * @default false\n     */\n    isRowResizable?: boolean;\n\n    /**\n     * If resizing is enabled, this callback will be invoked when the user\n     * finishes drag-resizing a row.\n     */\n    onRowHeightChanged?: IIndexedResizeCallback;\n\n    /**\n     * A sparse number array with a length equal to the number of rows. Any\n     * non-null value will be used to set the height of the row at the same\n     * index. Note that if you want to update these values when the user\n     * drag-resizes a row, you may define a callback for `onRowHeightChanged`.\n     */\n    rowHeights?: Array<number | null | undefined>;\n\n    /**\n     * If `false`, hides the row headers and settings menu.\n     * @default true\n     */\n    isRowHeaderShown?: boolean;\n\n    /**\n     * A callback called when the selection is changed in the table.\n     */\n    onSelection?: (selectedRegions: IRegion[]) => void;\n\n    /**\n     * A callback called when the focus is changed in the table.\n     */\n    onFocus?: (focusedCell: IFocusedCellCoordinates) => void;\n\n    /**\n     * If you want to do something after the copy or if you want to notify the\n     * user if a copy fails, you may provide this optional callback.\n     *\n     * Due to browser limitations, the copy can fail. This usually occurs if\n     * the selection is too large, like 20,000+ cells. The copy will also fail\n     * if the browser does not support the copy method (see\n     * `Clipboard.isCopySupported`).\n     */\n    onCopy?: (success: boolean) => void;\n\n    /**\n     * Render each row's header cell.\n     */\n    renderRowHeader?: IRowHeaderRenderer;\n\n    /**\n     * An optional callback for displaying a context menu when right-clicking\n     * on the table body. The callback is supplied with an array of\n     * `IRegion`s. If the mouse click was on a selection, the array will\n     * contain all selected regions. Otherwise it will have one `IRegion` that\n     * represents the clicked cell.\n     */\n    renderBodyContextMenu?: IContextMenuRenderer;\n\n    /**\n     * The number of rows in the table.\n     */\n    numRows?: number;\n\n    /**\n     * If defined, will set the focused cell state. This changes\n     * the focused cell to controlled mode, meaning you are in charge of\n     * setting the focus in response to events in the `onFocus` callback.\n     */\n    focusedCell?: IFocusedCellCoordinates;\n\n    /**\n     * If defined, will set the selected regions in the cells. If defined, this\n     * changes table selection to controlled mode, meaning you in charge of\n     * setting the selections in response to events in the `onSelection`\n     * callback.\n     *\n     * Note that the `selectionModes` prop controls which types of events are\n     * triggered to the `onSelection` callback, but does not restrict what\n     * selection you can pass to the `selectedRegions` prop. Therefore you can,\n     * for example, convert cell clicks into row selections.\n     */\n    selectedRegions?: IRegion[];\n\n    /**\n     * An optional transform function that will be applied to the located\n     * `Region`.\n     *\n     * This allows you to, for example, convert cell `Region`s into row\n     * `Region`s while maintaining the existing multi-select and meta-click\n     * functionality.\n     */\n    selectedRegionTransform?: ISelectedRegionTransform;\n\n    /**\n     * A `SelectionModes` enum value indicating the selection mode. You may\n     * equivalently provide an array of `RegionCardinality` enum values for\n     * precise configuration.\n     *\n     * The `SelectionModes` enum values are:\n     * - `ALL`\n     * - `NONE`\n     * - `COLUMNS_AND_CELLS`\n     * - `COLUMNS_ONLY`\n     * - `ROWS_AND_CELLS`\n     * - `ROWS_ONLY`\n     *\n     * The `RegionCardinality` enum values are:\n     * - `FULL_COLUMNS`\n     * - `FULL_ROWS`\n     * - `FULL_TABLE`\n     * - `CELLS`\n     *\n     * @default SelectionModes.ALL\n     */\n    selectionModes?: RegionCardinality[];\n\n    /**\n     * Styled region groups are rendered as overlays above the table and are\n     * marked with their own `className` for custom styling.\n     */\n    styledRegionGroups?: IStyledRegionGroup[];\n}\n\nexport interface ITableState {\n    /**\n     * An array of column widths. These are initialized from the column props\n     * and updated when the user drags column header resize handles.\n     */\n    columnWidths?: number[];\n\n    /**\n     * An ILocator object used for locating cells, rows, or columns given\n     * client coordinates as well as determining cell bounds given their\n     * indices.\n     */\n    locator?: Locator;\n\n    /**\n     * If `true`, will disable updates that will cause re-renders of children\n     * components. This is used, for example, to disable layout updates while\n     * the user is dragging a resize handle.\n     */\n    isLayoutLocked?: boolean;\n\n    /**\n     * The `Rect` bounds of the viewport used to perform virtual viewport\n     * performance enhancements.\n     */\n    viewportRect?: Rect;\n\n    /**\n     * An array of pixel offsets for resize guides, which are drawn over the\n     * table body when a column is being resized.\n     */\n    verticalGuides?: number[];\n\n    /**\n     * An array of pixel offsets for resize guides, which are drawn over the\n     * table body when a row is being resized.\n     */\n    horizontalGuides?: number[];\n\n    /**\n     * An array of row heights. These are initialized updated when the user\n     * drags row header resize handles.\n     */\n    rowHeights?: number[];\n\n    /**\n     * An array of Regions representing the selections of the table.\n     */\n    selectedRegions?: IRegion[];\n\n    /**\n     * The coordinates of the currently focused table cell\n     */\n    focusedCell?: IFocusedCellCoordinates;\n}\n\n@PureRender\n@HotkeysTarget\nexport class Table extends AbstractComponent<ITableProps, ITableState> {\n    public static defaultProps: ITableProps = {\n        allowMultipleSelection: true,\n        defaultColumnWidth: 150,\n        defaultRowHeight: 20,\n        enableFocus: false,\n        fillBodyWithGhostCells: false,\n        isRowHeaderShown: true,\n        loadingOptions: [],\n        minColumnWidth: 50,\n        minRowHeight: 20,\n        numRows: 0,\n        renderRowHeader: renderDefaultRowHeader,\n        selectionModes: SelectionModes.ALL,\n    };\n\n    private static createColumnIdIndex(children: Array<React.ReactElement<any>>) {\n        const columnIdToIndex: {[key: string]: number} = {};\n        for (let i = 0; i < children.length; i++) {\n            const key = children[i].props.id;\n            if (key != null) {\n                columnIdToIndex[String(key)] = i;\n            }\n        }\n        return columnIdToIndex;\n    }\n\n    private bodyElement: HTMLElement;\n    private childrenArray: Array<React.ReactElement<IColumnProps>>;\n    private columnIdToIndex: {[key: string]: number};\n    private grid: Grid;\n    private menuElement: HTMLElement;\n    private resizeSensorDetach: () => void;\n    private rootTableElement: HTMLElement;\n    private rowHeaderElement: HTMLElement;\n\n    public constructor(props: ITableProps, context?: any) {\n        super(props, context);\n\n        const { defaultRowHeight, defaultColumnWidth, numRows, columnWidths, rowHeights, children } = this.props;\n        this.childrenArray = React.Children.toArray(children) as Array<React.ReactElement<IColumnProps>>;\n        this.columnIdToIndex = Table.createColumnIdIndex(this.childrenArray);\n\n        // Create height/width arrays using the lengths from props and\n        // children, the default values from props, and finally any sparse\n        // arrays passed into props.\n        let newColumnWidths = this.childrenArray.map(() => defaultColumnWidth);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        let newRowHeights = Utils.times(numRows, () => defaultRowHeight);\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n\n        const selectedRegions = (props.selectedRegions == null) ? [] as IRegion[] : props.selectedRegions;\n\n        let focusedCell: IFocusedCellCoordinates;\n        if (props.enableFocus) {\n            if (props.focusedCell != null) {\n                focusedCell = props.focusedCell;\n            } else {\n                focusedCell = { col: 0, row: 0 };\n            }\n        }\n\n        this.state = {\n            columnWidths: newColumnWidths,\n            focusedCell,\n            isLayoutLocked: false,\n            rowHeights: newRowHeights,\n            selectedRegions,\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: ITableProps) {\n        const {\n            defaultRowHeight,\n            defaultColumnWidth,\n            columnWidths,\n            focusedCell,\n            rowHeights,\n            children,\n            numRows,\n            selectedRegions,\n        } = nextProps;\n        const newChildArray = React.Children.toArray(children) as Array<React.ReactElement<IColumnProps>>;\n\n        // Try to maintain widths of columns by looking up the width of the\n        // column that had the same `ID` prop. If none is found, use the\n        // previous width at the same index.\n        const previousColumnWidths = newChildArray.map((child: React.ReactElement<IColumnProps>, index: number) => {\n            const mappedIndex = this.columnIdToIndex[child.props.id];\n            return this.state.columnWidths[mappedIndex != null ? mappedIndex : index];\n        });\n\n        // Make sure the width/height arrays have the correct length, but keep\n        // as many existing widths/heights when possible. Also, apply the\n        // sparse width/heights from props.\n        let newColumnWidths = this.state.columnWidths;\n        newColumnWidths = Utils.arrayOfLength(newColumnWidths, newChildArray.length, defaultColumnWidth);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, previousColumnWidths);\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n\n        let newRowHeights = this.state.rowHeights;\n        newRowHeights = Utils.arrayOfLength(newRowHeights, numRows, defaultRowHeight);\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n\n        const numCols = newColumnWidths.length;\n\n        let newSelectedRegions = selectedRegions;\n        if (selectedRegions == null) {\n            // if we're in uncontrolled mode, filter out all selected regions that don't\n            // fit in the current new table dimensions\n            newSelectedRegions = this.state.selectedRegions.filter((region) => {\n                return Regions.isRegionValidForTable(region, numRows, numCols);\n            });\n        }\n        const newFocusedCellCoordinates = (focusedCell == null)\n            ? this.state.focusedCell\n            : focusedCell;\n\n        this.childrenArray = newChildArray;\n        this.columnIdToIndex = Table.createColumnIdIndex(this.childrenArray);\n        this.invalidateGrid();\n        this.setState({\n            columnWidths: newColumnWidths,\n            focusedCell: newFocusedCellCoordinates,\n            rowHeights: newRowHeights,\n            selectedRegions: newSelectedRegions,\n        });\n    }\n\n    public render() {\n        const { className, isRowHeaderShown } = this.props;\n        this.validateGrid();\n        return (\n            <div\n                className={classNames(Classes.TABLE_CONTAINER, className)}\n                ref={this.setRootTableRef}\n                onScroll={this.handleRootScroll}\n            >\n                 <div className={Classes.TABLE_TOP_CONTAINER}>\n                    {isRowHeaderShown ? this.renderMenu() : undefined}\n                    {this.renderColumnHeader()}\n                </div>\n                <div className={Classes.TABLE_BOTTOM_CONTAINER}>\n                    {isRowHeaderShown ? this.renderRowHeader() : undefined}\n                    {this.renderBody()}\n                </div>\n            </div>\n        );\n    }\n\n    public renderHotkeys() {\n        const hotkeys =\n            [this.maybeRenderCopyHotkey(), this.maybeRenderSelectAllHotkey(), this.maybeRenderFocusHotkeys()];\n        return (\n            <Hotkeys>\n                {hotkeys.filter((element) => element !== undefined)}\n            </Hotkeys>\n        );\n    }\n\n    /**\n     * When the component mounts, the HTML Element refs will be available, so\n     * we constructor the Locator, which queries the elements' bounding\n     * ClientRects.\n     */\n    public componentDidMount() {\n        this.validateGrid();\n        const locator = new Locator(\n            this.rootTableElement,\n            this.bodyElement,\n            this.grid,\n        );\n\n        const viewportRect = locator.getViewportRect();\n        this.setState({ locator, viewportRect });\n\n        this.resizeSensorDetach = ResizeSensor.attach(this.rootTableElement, () => {\n            if (!this.state.isLayoutLocked) {\n                this.setState({ viewportRect: locator.getViewportRect() });\n            }\n        });\n\n        this.syncMenuWidth();\n    }\n\n    public componentWillUnmount() {\n        if (this.resizeSensorDetach != null) {\n            this.resizeSensorDetach();\n            delete this.resizeSensorDetach;\n        }\n    }\n\n    public componentDidUpdate() {\n        const { locator } = this.state;\n        if (locator != null) {\n            this.validateGrid();\n            locator.setGrid(this.grid);\n        }\n\n        this.syncMenuWidth();\n    }\n\n    protected validateProps(props: ITableProps & { children: React.ReactNode }) {\n        const WARNING_MESSAGE = \"Children of Table must be Columns\";\n        React.Children.forEach(props.children, (child: React.ReactElement<any>) => {\n            // save as a variable so that union type narrowing works\n            const cType = child.type;\n\n            if (typeof cType === \"string\") {\n                console.warn(WARNING_MESSAGE);\n            } else {\n                const isColumn = cType.prototype === Column.prototype || Column.prototype.isPrototypeOf(cType);\n                if (!isColumn) {\n                    console.warn(WARNING_MESSAGE);\n                }\n            }\n        });\n    }\n\n    private handleCopy = (e: KeyboardEvent) => {\n        const { grid } = this;\n        const { getCellClipboardData, onCopy} = this.props;\n        const { selectedRegions} = this.state;\n\n        if (getCellClipboardData == null) {\n            return;\n        }\n\n        // prevent \"real\" copy from being called\n        e.preventDefault();\n        e.stopPropagation();\n\n        const cells = Regions.enumerateUniqueCells(selectedRegions, grid.numRows, grid.numCols);\n        const sparse = Regions.sparseMapCells(cells, getCellClipboardData);\n        if (sparse != null) {\n            const success = Clipboard.copyCells(sparse);\n            BlueprintUtils.safeInvoke(onCopy, success);\n        }\n    }\n\n    private renderMenu() {\n        const classes = classNames(Classes.TABLE_MENU, {\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE),\n        });\n        return (\n            <div\n                className={classes}\n                ref={this.setMenuRef}\n                onClick={this.selectAll}\n            >\n                {this.maybeRenderMenuRegions()}\n            </div>\n        );\n    }\n\n    private syncMenuWidth() {\n        const { menuElement, rowHeaderElement } = this;\n        if (menuElement != null && rowHeaderElement != null) {\n            const width = rowHeaderElement.getBoundingClientRect().width;\n            menuElement.style.width = `${width}px`;\n        }\n    }\n\n    private selectAll = () => {\n        const selectionHandler = this.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE);\n        // clicking on upper left hand corner sets selection to \"all\"\n        // regardless of current selection state (clicking twice does not deselect table)\n        selectionHandler([Regions.table()]);\n    }\n\n    private handleSelectAllHotkey = (e: KeyboardEvent) => {\n        // prevent \"real\" select all from happening as well\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.selectAll();\n    }\n\n    private getColumnProps(columnIndex: number) {\n        const column = this.childrenArray[columnIndex] as React.ReactElement<IColumnProps>;\n        return column.props;\n    }\n\n    private columnHeaderCellRenderer = (columnIndex: number) => {\n        const props = this.getColumnProps(columnIndex);\n        const columnLoading = this.hasLoadingOption(props.loadingOptions, ColumnLoadingOption.HEADER);\n        const { renderColumnHeader } = props;\n        if (renderColumnHeader != null) {\n            const columnHeader = renderColumnHeader(columnIndex);\n            const columnHeaderLoading  = columnHeader.props.loading;\n            return React.cloneElement(columnHeader, {\n                loading: columnHeaderLoading != null ? columnHeaderLoading : columnLoading,\n            } as IColumnHeaderCellProps);\n        } else if (props.name != null) {\n            return <ColumnHeaderCell {...props} loading={columnLoading} />;\n        } else {\n            return <ColumnHeaderCell {...props} loading={columnLoading} name={Utils.toBase26Alpha(columnIndex)} />;\n        }\n    }\n\n    private renderColumnHeader() {\n        const { grid } = this;\n        const { locator, selectedRegions, viewportRect } = this.state;\n        const {\n            allowMultipleSelection,\n            fillBodyWithGhostCells,\n            isColumnResizable,\n            loadingOptions,\n            maxColumnWidth,\n            minColumnWidth,\n            selectedRegionTransform,\n        } = this.props;\n        const classes = classNames(Classes.TABLE_COLUMN_HEADERS, {\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.FULL_COLUMNS),\n        });\n        const columnIndices = grid.getColumnIndicesInRect(viewportRect, fillBodyWithGhostCells);\n\n        return (\n            <div className={classes}>\n                <ColumnHeader\n                    allowMultipleSelection={allowMultipleSelection}\n                    cellRenderer={this.columnHeaderCellRenderer}\n                    grid={grid}\n                    isResizable={isColumnResizable}\n                    loading={this.hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS)}\n                    locator={locator}\n                    maxColumnWidth={maxColumnWidth}\n                    minColumnWidth={minColumnWidth}\n                    onColumnWidthChanged={this.handleColumnWidthChanged}\n                    onFocus={this.handleFocus}\n                    onLayoutLock={this.handleLayoutLock}\n                    onResizeGuide={this.handleColumnResizeGuide}\n                    onSelection={this.getEnabledSelectionHandler(RegionCardinality.FULL_COLUMNS)}\n                    selectedRegions={selectedRegions}\n                    selectedRegionTransform={selectedRegionTransform}\n                    viewportRect={viewportRect}\n                    {...columnIndices}\n                >\n                    {this.props.children}\n                </ColumnHeader>\n\n                {this.maybeRenderColumnHeaderRegions()}\n            </div>\n        );\n    }\n\n    private renderRowHeader() {\n        const { grid } = this;\n        const { locator, selectedRegions, viewportRect } = this.state;\n        const {\n            allowMultipleSelection,\n            fillBodyWithGhostCells,\n            isRowResizable,\n            loadingOptions,\n            maxRowHeight,\n            minRowHeight,\n            renderRowHeader,\n            selectedRegionTransform,\n        } = this.props;\n        const classes = classNames(Classes.TABLE_ROW_HEADERS, {\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.FULL_ROWS),\n        });\n        const rowIndices = grid.getRowIndicesInRect(viewportRect, fillBodyWithGhostCells);\n        return (\n            <div\n                className={classes}\n                ref={this.setRowHeaderRef}\n            >\n                <RowHeader\n                    allowMultipleSelection={allowMultipleSelection}\n                    grid={grid}\n                    locator={locator}\n                    isResizable={isRowResizable}\n                    loading={this.hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS)}\n                    maxRowHeight={maxRowHeight}\n                    minRowHeight={minRowHeight}\n                    onFocus={this.handleFocus}\n                    onLayoutLock={this.handleLayoutLock}\n                    onResizeGuide={this.handleRowResizeGuide}\n                    onRowHeightChanged={this.handleRowHeightChanged}\n                    onSelection={this.getEnabledSelectionHandler(RegionCardinality.FULL_ROWS)}\n                    renderRowHeader={renderRowHeader}\n                    selectedRegions={selectedRegions}\n                    selectedRegionTransform={selectedRegionTransform}\n                    viewportRect={viewportRect}\n                    {...rowIndices}\n                />\n\n                {this.maybeRenderRowHeaderRegions()}\n            </div>\n        );\n    }\n\n    private bodyCellRenderer = (rowIndex: number, columnIndex: number) => {\n        const columnProps = this.getColumnProps(columnIndex);\n        const cell = columnProps.renderCell(rowIndex, columnIndex);\n        const cellLoading = cell.props.loading;\n\n        const loading = cellLoading != null\n            ? cellLoading\n            : this.hasLoadingOption(columnProps.loadingOptions, ColumnLoadingOption.CELLS);\n\n        return React.cloneElement(cell, { ...columnProps, loading } as ICellProps);\n    }\n\n    private renderBody() {\n        const { grid } = this;\n        const {\n            allowMultipleSelection,\n            fillBodyWithGhostCells,\n            loadingOptions,\n            renderBodyContextMenu,\n            selectedRegionTransform,\n        } = this.props;\n        const { locator, selectedRegions, viewportRect, verticalGuides, horizontalGuides } = this.state;\n\n        const style = grid.getRect().sizeStyle();\n        const rowIndices = grid.getRowIndicesInRect(viewportRect, fillBodyWithGhostCells);\n        const columnIndices = grid.getColumnIndicesInRect(viewportRect, fillBodyWithGhostCells);\n        const noVerticalScroll = fillBodyWithGhostCells &&\n            grid.isGhostIndex(rowIndices.rowIndexEnd, 0) &&\n            viewportRect != null && viewportRect.top === 0 ||\n            this.hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS);\n        const noHorizontalScroll = fillBodyWithGhostCells &&\n            grid.isGhostIndex(0, columnIndices.columnIndexEnd) &&\n            viewportRect != null && viewportRect.left === 0 ||\n            this.hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS);\n\n        // disable scroll for ghost cells\n        const classes = classNames(Classes.TABLE_BODY, {\n            [Classes.TABLE_NO_HORIZONTAL_SCROLL]: noHorizontalScroll,\n            [Classes.TABLE_NO_VERTICAL_SCROLL]: noVerticalScroll,\n            [Classes.TABLE_SELECTION_ENABLED]: this.isSelectionModeEnabled(RegionCardinality.CELLS),\n        });\n        return (\n            <div\n                className={classes}\n                onScroll={this.handleBodyScroll}\n                ref={this.setBodyRef}\n            >\n                <div className={Classes.TABLE_BODY_SCROLL_CLIENT} style={style}>\n                    <TableBody\n                        allowMultipleSelection={allowMultipleSelection}\n                        cellRenderer={this.bodyCellRenderer}\n                        grid={grid}\n                        loading={this.hasLoadingOption(loadingOptions, TableLoadingOption.CELLS)}\n                        locator={locator}\n                        onFocus={this.handleFocus}\n                        onSelection={this.getEnabledSelectionHandler(RegionCardinality.CELLS)}\n                        renderBodyContextMenu={renderBodyContextMenu}\n                        selectedRegions={selectedRegions}\n                        selectedRegionTransform={selectedRegionTransform}\n                        viewportRect={viewportRect}\n                        {...rowIndices}\n                        {...columnIndices}\n                    />\n\n                    {this.maybeRenderBodyRegions()}\n\n                    <GuideLayer\n                        className={Classes.TABLE_RESIZE_GUIDES}\n                        verticalGuides={verticalGuides}\n                        horizontalGuides={horizontalGuides}\n                    />\n                </div>\n\n            </div>\n        );\n    }\n\n    private isGuidesShowing() {\n        return this.state.verticalGuides != null || this.state.horizontalGuides != null;\n    }\n\n    private isSelectionModeEnabled(selectionMode: RegionCardinality) {\n        return this.props.selectionModes.indexOf(selectionMode) >= 0;\n    }\n\n    private getEnabledSelectionHandler(selectionMode: RegionCardinality) {\n        if (!this.isSelectionModeEnabled(selectionMode)) {\n            // If the selection mode isn't enabled, return a callback that\n            // will clear the selection. For example, if row selection is\n            // disabled, clicking on the row header will clear the table's\n            // selection. If all selection modes are enabled, clicking on the\n            // same region twice will clear the selection.\n            return this.clearSelection;\n        } else {\n            return this.handleSelection;\n        }\n    }\n\n    private invalidateGrid() {\n        this.grid = null;\n    }\n\n    private validateGrid() {\n        if (this.grid == null) {\n            const { defaultRowHeight, defaultColumnWidth } = this.props;\n            const { rowHeights, columnWidths } = this.state;\n            this.grid = new Grid(\n                rowHeights,\n                columnWidths,\n                Grid.DEFAULT_BLEED,\n                defaultRowHeight,\n                defaultColumnWidth,\n            );\n        }\n    }\n\n    /**\n     * Renders a `RegionLayer`, applying styles to the regions using the\n     * supplied `IRegionStyler`. `RegionLayer` is a `PureRender` component, so\n     * the `IRegionStyler` should be a new instance on every render if we\n     * intend to redraw the region layer.\n     */\n    private maybeRenderRegions(getRegionStyle: IRegionStyler) {\n        if (this.isGuidesShowing()) {\n            return undefined;\n        }\n\n        const regionGroups = Regions.joinStyledRegionGroups(\n            this.state.selectedRegions,\n            this.props.styledRegionGroups,\n            this.state.focusedCell,\n        );\n\n        return regionGroups.map((regionGroup, index) => {\n            return (\n                <RegionLayer\n                    className={classNames(regionGroup.className)}\n                    key={index}\n                    regions={regionGroup.regions}\n                    getRegionStyle={getRegionStyle}\n                />\n            );\n        });\n    }\n\n    private maybeRenderCopyHotkey() {\n        const { getCellClipboardData } = this.props;\n        if (getCellClipboardData != null) {\n            return (\n                <Hotkey\n                    key=\"copy-hotkey\"\n                    label=\"Copy selected table cells\"\n                    group=\"Table\"\n                    combo=\"mod+c\"\n                    onKeyDown={this.handleCopy}\n                />\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    private handleFocusMoveLeft = (e: KeyboardEvent) => this.handleFocusMove(e, \"left\");\n    private handleFocusMoveRight = (e: KeyboardEvent) => this.handleFocusMove(e, \"right\");\n    private handleFocusMoveUp = (e: KeyboardEvent) => this.handleFocusMove(e, \"up\");\n    private handleFocusMoveDown = (e: KeyboardEvent) => this.handleFocusMove(e, \"down\");\n\n    private maybeRenderFocusHotkeys() {\n        const { enableFocus } = this.props;\n        if (enableFocus != null) {\n            return [\n                <Hotkey\n                    key=\"move left\"\n                    label=\"Move focus cell left\"\n                    group=\"Table\"\n                    combo=\"left\"\n                    onKeyDown={this.handleFocusMoveLeft}\n                />,\n                <Hotkey\n                    key=\"move right\"\n                    label=\"Move focus cell right\"\n                    group=\"Table\"\n                    combo=\"right\"\n                    onKeyDown={this.handleFocusMoveRight}\n                />,\n                <Hotkey\n                    key=\"move up\"\n                    label=\"Move focus cell up\"\n                    group=\"Table\"\n                    combo=\"up\"\n                    onKeyDown={this.handleFocusMoveUp}\n                />,\n                <Hotkey\n                    key=\"move down\"\n                    label=\"Move focus cell down\"\n                    group=\"Table\"\n                    combo=\"down\"\n                    onKeyDown={this.handleFocusMoveDown}\n                />,\n            ];\n        } else {\n            return [];\n        }\n    }\n\n    private maybeRenderSelectAllHotkey() {\n        if (this.isSelectionModeEnabled(RegionCardinality.FULL_TABLE)) {\n            return (\n                <Hotkey\n                    key=\"select-all-hotkey\"\n                    label=\"Select all\"\n                    group=\"Table\"\n                    combo=\"mod+a\"\n                    onKeyDown={this.handleSelectAllHotkey}\n                />\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    private maybeRenderBodyRegions() {\n        const styler = (region: IRegion): React.CSSProperties => {\n            const cardinality = Regions.getRegionCardinality(region);\n            const style = this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.CELLS:\n                    return style;\n\n                case RegionCardinality.FULL_COLUMNS:\n                    style.top = \"-1px\";\n                    return style;\n\n                case RegionCardinality.FULL_ROWS:\n                    style.left = \"-1px\";\n                    return style;\n\n                case RegionCardinality.FULL_TABLE:\n                    style.left = \"-1px\";\n                    style.top = \"-1px\";\n                    return style;\n\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        return this.maybeRenderRegions(styler);\n    }\n\n    private maybeRenderMenuRegions() {\n        const styler = (region: IRegion): React.CSSProperties => {\n            const { grid } = this;\n            const { viewportRect } = this.state;\n            if (viewportRect == null) {\n                return {};\n            }\n            const cardinality = Regions.getRegionCardinality(region);\n            const style = grid.getRegionStyle(region);\n\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.right = \"0px\";\n                    style.bottom = \"0px\";\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.borderBottom = \"none\";\n                    style.borderRight = \"none\";\n                    return style;\n\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        return this.maybeRenderRegions(styler);\n    }\n\n    private maybeRenderColumnHeaderRegions() {\n        const styler = (region: IRegion): React.CSSProperties => {\n            const { grid } = this;\n            const { viewportRect } = this.state;\n            if (viewportRect == null) {\n                return {};\n            }\n            const cardinality = Regions.getRegionCardinality(region);\n            const style = grid.getRegionStyle(region);\n\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.left = \"-1px\";\n                    style.borderLeft = \"none\";\n                    style.bottom = \"-1px\";\n                    style.transform = `translate3d(${-viewportRect.left}px, 0, 0)`;\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.bottom = \"-1px\";\n                    style.transform = `translate3d(${-viewportRect.left}px, 0, 0)`;\n                    return style;\n\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        return this.maybeRenderRegions(styler);\n    }\n\n    private maybeRenderRowHeaderRegions() {\n        const styler = (region: IRegion): React.CSSProperties => {\n            const { grid } = this;\n            const { viewportRect } = this.state;\n            if (viewportRect == null) {\n                return {};\n            }\n            const cardinality = Regions.getRegionCardinality(region);\n            const style = grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.top = \"-1px\";\n                    style.borderTop = \"none\";\n                    style.right = \"-1px\";\n                    style.transform = `translate3d(0, ${-viewportRect.top}px, 0)`;\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.right = \"-1px\";\n                    style.transform = `translate3d(0, ${-viewportRect.top}px, 0)`;\n                    return style;\n\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        return this.maybeRenderRegions(styler);\n    }\n\n    private handleColumnWidthChanged = (columnIndex: number, width: number) => {\n        const selectedRegions = this.state.selectedRegions;\n        const columnWidths = this.state.columnWidths.slice();\n\n        if (Regions.hasFullTable(selectedRegions)) {\n            for (let col = 0; col < columnWidths.length; col++) {\n                columnWidths[col] = width;\n            }\n        }\n        if (Regions.hasFullColumn(selectedRegions, columnIndex)) {\n            Regions.eachUniqueFullColumn(selectedRegions, (col: number) => {\n                columnWidths[col] = width;\n            });\n        } else {\n            columnWidths[columnIndex] = width;\n        }\n\n        this.invalidateGrid();\n        this.setState({ columnWidths });\n\n        const { onColumnWidthChanged } = this.props;\n        if (onColumnWidthChanged != null) {\n            onColumnWidthChanged(columnIndex, width);\n        }\n    }\n\n    private handleRowHeightChanged = (rowIndex: number, height: number) => {\n        const selectedRegions = this.state.selectedRegions;\n        const rowHeights = this.state.rowHeights.slice();\n\n        if (Regions.hasFullTable(selectedRegions)) {\n            for (let row = 0; row < rowHeights.length; row++) {\n                rowHeights[row] = height;\n            }\n        }\n        if (Regions.hasFullRow(selectedRegions, rowIndex)) {\n            Regions.eachUniqueFullRow(selectedRegions, (row: number) => {\n                rowHeights[row] = height;\n            });\n        } else {\n            rowHeights[rowIndex] = height;\n        }\n\n        this.invalidateGrid();\n        this.setState({ rowHeights });\n\n        const { onRowHeightChanged } = this.props;\n        if (onRowHeightChanged != null) {\n            onRowHeightChanged(rowIndex, height);\n        }\n    }\n\n    private handleRootScroll = (_event: React.UIEvent<HTMLElement>) => {\n        // Bug #211 - Native browser text selection events can cause the root\n        // element to scroll even though it has a overflow:hidden style. The\n        // only viable solution to this is to unscroll the element after the\n        // browser scrolls it.\n        if (this.rootTableElement != null) {\n            this.rootTableElement.scrollLeft = 0;\n            this.rootTableElement.scrollTop = 0;\n        }\n    }\n\n    private handleBodyScroll = (event: React.UIEvent<HTMLElement>) => {\n        // Prevent the event from propagating to avoid a resize event on the\n        // resize sensor.\n        event.stopPropagation();\n\n        const { locator, isLayoutLocked } = this.state;\n        if (locator != null && !isLayoutLocked) {\n            const viewportRect = locator.getViewportRect();\n            this.setState({ viewportRect });\n        }\n    }\n\n    private handleColumnResizeGuide = (verticalGuides: number[]) => {\n        this.setState({ verticalGuides } as ITableState);\n    }\n\n    private handleRowResizeGuide = (horizontalGuides: number[]) => {\n        this.setState({ horizontalGuides } as ITableState);\n    }\n\n    private clearSelection = (_selectedRegions: IRegion[]) => {\n        this.handleSelection([]);\n    }\n\n    // no good way to call arrow-key keyboard events from tests\n    /* istanbul ignore next */\n    private handleFocusMove = (e: KeyboardEvent, direction: \"up\" | \"down\" | \"left\" | \"right\") => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { focusedCell } = this.state;\n        const newFocusedCell = { col: focusedCell.col, row: focusedCell.row };\n        const { grid } = this;\n\n        switch (direction) {\n            case \"up\":\n                newFocusedCell.row -= 1;\n                break;\n            case \"down\":\n                newFocusedCell.row += 1;\n                break;\n            case \"left\":\n                newFocusedCell.col -= 1;\n                break;\n            case \"right\":\n                newFocusedCell.col += 1;\n                break;\n            default:\n                break;\n        }\n\n        if (newFocusedCell.row < 0 || newFocusedCell.row >= grid.numRows ||\n            newFocusedCell.col < 0 || newFocusedCell.col >= grid.numCols) {\n            return;\n        }\n\n        // change selection to match new focus cell location\n        const newSelectionRegions = [Regions.cell(newFocusedCell.row, newFocusedCell.col)];\n        this.handleSelection(newSelectionRegions);\n        this.handleFocus(newFocusedCell);\n    }\n\n    private handleFocus = (focusedCell: IFocusedCellCoordinates) => {\n        if (!this.props.enableFocus) {\n            // don't set focus state if focus is not allowed\n            return;\n        }\n\n        // only set focused cell state if not specified in props\n        if (this.props.focusedCell == null) {\n            this.setState({ focusedCell } as ITableState);\n        }\n\n        BlueprintUtils.safeInvoke(this.props.onFocus, focusedCell);\n    }\n\n    private handleSelection = (selectedRegions: IRegion[]) => {\n        // only set selectedRegions state if not specified in props\n        if (this.props.selectedRegions == null) {\n            this.setState({ selectedRegions } as ITableState);\n        }\n\n        const { onSelection } = this.props;\n        if (onSelection != null) {\n            onSelection(selectedRegions);\n        }\n    }\n\n    private handleLayoutLock = (isLayoutLocked = false) => {\n        this.setState({ isLayoutLocked });\n    }\n\n    private hasLoadingOption = (loadingOptions: string[], loadingOption: string) => {\n        if (loadingOptions == null) {\n            return undefined;\n        }\n        return loadingOptions.indexOf(loadingOption) >= 0;\n    }\n\n    private setBodyRef = (ref: HTMLElement) => this.bodyElement = ref;\n    private setMenuRef = (ref: HTMLElement) => this.menuElement = ref;\n    private setRootTableRef = (ref: HTMLElement) => this.rootTableElement = ref;\n    private setRowHeaderRef = (ref: HTMLElement) => this.rowHeaderElement = ref;\n\n}\n"]}