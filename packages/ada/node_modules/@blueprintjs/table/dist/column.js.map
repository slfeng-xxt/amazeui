{"version":3,"sources":["../src/column.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,6BAA+B;AAI/B,oCAA+D;AAqC/D;IAA4B,kCAAiC;IAA7D;;IAIA,CAAC;IAAD,aAAC;AAAD,CAJA,AAIC,CAJ2B,KAAK,CAAC,SAAS;AACzB,mBAAY,GAAiB;IACvC,UAAU,EAAE,wBAAiB;CAChC,CAAC;AAHO,wBAAM","file":"column.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\n\nimport { IProps } from \"@blueprintjs/core\";\n\nimport { emptyCellRenderer, ICellRenderer } from \"./cell/cell\";\nimport { IColumnHeaderRenderer, IColumnNameProps } from \"./headers/columnHeaderCell\";\nimport { ColumnLoadingOption } from \"./regions\";\n\nexport interface IColumnProps extends IColumnNameProps, IProps {\n    /**\n     * A unique ID, similar to React's `key`. This is used, for example, to\n     * maintain the width of a column between re-ordering and rendering. If no\n     * IDs are provided, widths will be persisted across renders using a\n     * column's index only. Columns widths can also be persisted outside the\n     * `Table` component, then passed in with the `columnWidths` prop.\n     */\n    id?: string | number;\n\n    /**\n     * Set this prop to specify whether to render the loading state of the\n     * column header and cells in this column. Column-level `loadingOptions`\n     * override `Table`-level `loadingOptions`. For example, if you set\n     * `loadingOptions=[ TableLoadingOption.CELLS ]` on `Table` and\n     * `loadingOptions=[ ColumnLoadingOption.HEADER ]` on a `Column`, the cells\n     * in that column will _not_ show their loading state.\n     */\n    loadingOptions?: ColumnLoadingOption[];\n\n    /**\n     * An instance of `ICellRenderer`, a function that takes a row and column\n     * index, and returns a `Cell` React element.\n     */\n    renderCell?: ICellRenderer;\n\n    /**\n     * An instance of `IColumnHeaderRenderer`, a function that takes a column\n     * index and returns a `ColumnHeaderCell` React element.\n     */\n    renderColumnHeader?: IColumnHeaderRenderer;\n}\n\nexport class Column extends React.Component<IColumnProps, {}> {\n    public static defaultProps: IColumnProps = {\n        renderCell: emptyCellRenderer,\n    };\n}\n"]}