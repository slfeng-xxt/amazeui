{"version":3,"sources":["../src/headers/columnHeaderCell.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAE/B,0CAAyG;AAEzG,2CAA6C;AAC7C,6DAA4D;AAuF5D;IACI,MAAM,CAAC,6BAAK,SAAS,EAAE,OAAO,CAAC,6BAA6B,GAAG,CAAC;AACpE,CAAC;AAFD,sDAEC;AAID,IAAa,gBAAgB;IAAS,4CAA2D;IAFjG;QAAA,qEA8HC;QAvGU,WAAK,GAAG;YACX,QAAQ,EAAE,KAAK;SAClB,CAAC;QAkGM,kCAA4B,GAAG,UAAC,QAAiB,IAAK,OAAA;YAC1D,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;QAChC,CAAC,EAF6D,CAE7D,CAAA;;IACL,CAAC;IArHG;;;;;;OAMG;IACW,oCAAmB,GAAjC,UAAkC,MAAmB;QACjD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC;eAC/C,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC;eACpD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,qBAAqB,CAAC;eACxD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IACnE,CAAC;IAMM,iCAAM,GAAb;QACU,IAAA,eAAoF,EAAlF,wBAAS,EAAE,sBAAQ,EAAE,sCAAgB,EAAE,oBAAO,EAAE,8BAAY,EAAE,gBAAK,CAAgB;QAC3F,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY;YAC3C,GAAC,OAAO,CAAC,mBAAmB,IAAG,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC9D,GAAC,OAAO,CAAC,qBAAqB,IAAG,gBAAgB;YACjD,GAAC,cAAW,CAAC,OAAO,IAAG,OAAO;iBAC/B,SAAS,CAAC,CAAC;QAEd,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK;YAChC,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,kBAAkB,EAAE;YACzB,OAAO,GAAG,SAAS,GAAG,YAAY,CACjC,CACT,CAAC;;IACN,CAAC;IAEM,4CAAiB,GAAxB,UAAyB,MAAqC;QAC1D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC3B,CAAC;IAEO,qCAAU,GAAlB;QACU,IAAA,eAA6D,EAA3D,oBAAO,EAAE,cAAI,EAAE,0BAAU,EAAE,wCAAiB,CAAgB;QACpE,IAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACpD,IAAM,WAAW,GAAG,6BAAK,SAAS,EAAE,OAAO,CAAC,oBAAoB,IAAG,IAAI,CAAO,CAAC;QAC/E,IAAM,aAAa,GAAG,CAClB,oBAAC,iCAAe,IAAC,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,IAClD,UAAU,IAAI,IAAI,GAAG,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,CACtC,CACrB,CAAC;QACF,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,CAAC,iBAAiB,EAAE,KAAK,EAAE,IAAI;gBAClD,6BAAK,SAAS,EAAE,OAAO,CAAC,qBAAqB,IAAG,YAAY,CAAO;gBACnE,oBAAC,qBAAqB,OAAG;gBACzB,6BAAK,SAAS,EAAE,OAAO,CAAC,sBAAsB,IAAG,aAAa,CAAO,CACnE,CACT,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,CAAC,iBAAiB,EAAE,KAAK,EAAE,IAAI;gBACjD,YAAY;gBACb,6BAAK,SAAS,EAAE,OAAO,CAAC,sBAAsB,IAAG,aAAa,CAAO,CACnE,CACT,CAAC;QACN,CAAC;IACL,CAAC;IAEO,6CAAkB,GAA1B;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,CAAC,oBAAoB,IACvC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAClB,CACT,CAAC;IACN,CAAC;IAEO,kDAAuB,GAA/B;QACU,IAAA,eAAmC,EAAjC,cAAI,EAAE,8BAAY,CAAgB;QAE1C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,IAAM,oBAAoB,GAAG,UAAU,CACnC,cAAW,CAAC,aAAa,EACzB,cAAW,CAAC,SAAS,CAAC,YAAY,CAAC,CACtC,CAAC;QAEF,IAAM,WAAW,GAAG,CAAC;gBACjB,UAAU,EAAE,UAAU;gBACtB,GAAG,EAAE,IAAI;gBACT,EAAE,EAAE,QAAQ;aACf,CAAC,CAAC;QAEH,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,CAAC,uBAAuB;YAC3C,6BAAK,SAAS,EAAE,OAAO,CAAC,kCAAkC,GAAI;YAC9D,oBAAC,cAAO,IACJ,aAAa,EAAE,EAAE,WAAW,aAAA,EAAE,EAC9B,OAAO,EAAE,IAAI,EACb,QAAQ,EAAE,eAAQ,CAAC,MAAM,EACzB,SAAS,EAAE,OAAO,CAAC,aAAa,EAChC,cAAc,EAAE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,EACvD,gBAAgB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,EAC1D,wBAAwB,EAAE,IAAI;gBAE9B,8BAAM,SAAS,EAAE,oBAAoB,GAAG,CAClC,CACR,CACT,CAAC;IACN,CAAC;IAKL,uBAAC;AAAD,CA5HA,AA4HC,CA5HqC,KAAK,CAAC,SAAS,GA4HpD;AA3HiB,6BAAY,GAA2B;IACjD,QAAQ,EAAE,KAAK;IACf,YAAY,EAAE,cAAc;IAC5B,iBAAiB,EAAE,KAAK;CAC3B,CAAC;AALO,gBAAgB;IAF5B,wBAAiB;IACjB,UAAU;GACE,gBAAgB,CA4H5B;AA5HY,4CAAgB","file":"headers/columnHeaderCell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport { Classes as CoreClasses, ContextMenuTarget, IProps, Popover, Position } from \"@blueprintjs/core\";\n\nimport * as Classes from \"../common/classes\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { ResizeHandle } from \"../interactions/resizeHandle\";\n\nexport type IColumnHeaderRenderer = (columnIndex: number) => React.ReactElement<IColumnHeaderCellProps>;\n\nexport interface IColumnNameProps {\n    /**\n     * The name displayed in the header of the column.\n     */\n    name?: string;\n\n    /**\n     * A callback to override the default name rendering behavior. The default\n     * behavior is to simply use the `ColumnHeaderCell`s name prop.\n     *\n     * This render callback can be used, for example, to provide a\n     * `EditableName` component for editing column names.\n     *\n     * If you define this callback, we recommend you also set\n     * `useInteractionBar` to `true`, to avoid issues with menus or selection.\n     */\n    renderName?: (name: string) => React.ReactElement<IProps>;\n\n    /**\n     * If `true`, adds an interaction bar on top of the column header cell and\n     * moves the menu and selection interactions to it.\n     *\n     * This allows you to override the rendering of column name without worry\n     * of clobbering the menu or other interactions.\n     *\n     * @default false\n     */\n    useInteractionBar?: boolean;\n}\n\nexport interface IColumnHeaderCellProps extends IColumnNameProps, IProps {\n    /**\n     * If `true`, will apply the active class to the header to indicate it is\n     * part of an external operation.\n     *\n     * @default false\n     */\n    isActive?: boolean;\n\n    /**\n     * Specifies if the full column is part of a selection.\n     */\n    isColumnSelected?: boolean;\n\n    /**\n     * If `true`, the column `name` will be replaced with a fixed-height skeleton and the\n     * `resizeHandle` will not be rendered. If passing in additional children to this component, you\n     * will also want to conditionally apply the `pt-skeleton` class where appropriate.\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * An element, like a `<Menu>`, that is displayed by clicking the button\n     * to the right of the header name, or by right-clicking anywhere in the\n     * header.\n     */\n    menu?: JSX.Element;\n\n    /**\n     * The icon name for the header's menu button.\n     * @default 'chevron-down'\n     */\n    menuIconName?: string;\n\n    /**\n     * CSS styles for the top level element.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * A `ResizeHandle` React component that allows users to drag-resize the\n     * header. If you are wrapping your `ColumnHeaderCell` in your own\n     * component, you'll need to pass this through for resizing to work.\n     */\n    resizeHandle?: ResizeHandle;\n}\n\nexport interface IColumnHeaderState {\n    isActive: boolean;\n}\n\nexport function HorizontalCellDivider(): JSX.Element {\n    return <div className={Classes.TABLE_HORIZONTAL_CELL_DIVIDER}/>;\n}\n\n@ContextMenuTarget\n@PureRender\nexport class ColumnHeaderCell extends React.Component<IColumnHeaderCellProps, IColumnHeaderState> {\n    public static defaultProps: IColumnHeaderCellProps = {\n        isActive: false,\n        menuIconName: \"chevron-down\",\n        useInteractionBar: false,\n    };\n\n    /**\n     * This method determines if a `MouseEvent` was triggered on a target that\n     * should be used as the header click/drag target. This enables users of\n     * this component to render fully interactive components in their header\n     * cells without worry of selection or resize operations from capturing\n     * their mouse events.\n     */\n    public static isHeaderMouseTarget(target: HTMLElement) {\n        return target.classList.contains(Classes.TABLE_HEADER)\n            || target.classList.contains(Classes.TABLE_COLUMN_NAME)\n            || target.classList.contains(Classes.TABLE_INTERACTION_BAR)\n            || target.classList.contains(Classes.TABLE_HEADER_CONTENT);\n    }\n\n    public state = {\n        isActive: false,\n    };\n\n    public render() {\n        const { className, isActive, isColumnSelected, loading, resizeHandle, style } = this.props;\n        const classes = classNames(Classes.TABLE_HEADER, {\n            [Classes.TABLE_HEADER_ACTIVE]: isActive || this.state.isActive,\n            [Classes.TABLE_HEADER_SELECTED]: isColumnSelected,\n            [CoreClasses.LOADING]: loading,\n        }, className);\n\n        return (\n            <div className={classes} style={style}>\n                {this.renderName()}\n                {this.maybeRenderContent()}\n                {loading ? undefined : resizeHandle}\n            </div>\n        );\n    }\n\n    public renderContextMenu(_event: React.MouseEvent<HTMLElement>) {\n        return this.props.menu;\n    }\n\n    private renderName() {\n        const { loading, name, renderName, useInteractionBar } = this.props;\n        const dropdownMenu = this.maybeRenderDropdownMenu();\n        const defaultName = <div className={Classes.TABLE_TRUNCATED_TEXT}>{name}</div>;\n        const nameComponent = (\n            <LoadableContent loading={loading} variableLength={true}>\n                {renderName == null ? defaultName : renderName(name)}\n            </LoadableContent>\n        );\n        if (useInteractionBar) {\n            return (\n                <div className={Classes.TABLE_COLUMN_NAME} title={name}>\n                    <div className={Classes.TABLE_INTERACTION_BAR}>{dropdownMenu}</div>\n                    <HorizontalCellDivider />\n                    <div className={Classes.TABLE_COLUMN_NAME_TEXT}>{nameComponent}</div>\n                </div>\n            );\n        } else {\n            return (\n                <div className={Classes.TABLE_COLUMN_NAME} title={name}>\n                    {dropdownMenu}\n                    <div className={Classes.TABLE_COLUMN_NAME_TEXT}>{nameComponent}</div>\n                </div>\n            );\n        }\n    }\n\n    private maybeRenderContent() {\n        if (this.props.children === null) {\n            return undefined;\n        }\n\n        return (\n            <div className={Classes.TABLE_HEADER_CONTENT}>\n                {this.props.children}\n            </div>\n        );\n    }\n\n    private maybeRenderDropdownMenu() {\n        const { menu, menuIconName } = this.props;\n\n        if (menu == null) {\n            return undefined;\n        }\n\n        const popoverTargetClasses = classNames(\n            CoreClasses.ICON_STANDARD,\n            CoreClasses.iconClass(menuIconName),\n        );\n\n        const constraints = [{\n            attachment: \"together\",\n            pin: true,\n            to: \"window\",\n        }];\n\n        return (\n            <div className={Classes.TABLE_TH_MENU_CONTAINER}>\n                <div className={Classes.TABLE_TH_MENU_CONTAINER_BACKGROUND} />\n                <Popover\n                    tetherOptions={{ constraints }}\n                    content={menu}\n                    position={Position.BOTTOM}\n                    className={Classes.TABLE_TH_MENU}\n                    popoverDidOpen={this.getPopoverStateChangeHandler(true)}\n                    popoverWillClose={this.getPopoverStateChangeHandler(false)}\n                    useSmartArrowPositioning={true}\n                >\n                    <span className={popoverTargetClasses}/>\n                </Popover>\n            </div>\n        );\n    }\n\n    private getPopoverStateChangeHandler = (isActive: boolean) => () => {\n        this.setState({ isActive });\n    }\n}\n"]}