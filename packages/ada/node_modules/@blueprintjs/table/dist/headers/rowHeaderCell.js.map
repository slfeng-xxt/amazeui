{"version":3,"sources":["../src/headers/rowHeaderCell.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,6BAA+B;AAE/B,0CAAsF;AAEtF,2CAA6C;AAC7C,6DAA4D;AAmD5D,IAAa,aAAa;IAAS,yCAAqD;IADxF;QAAA,qEAkCC;QAhCU,WAAK,GAAG;YACX,QAAQ,EAAE,KAAK;SAClB,CAAC;;IA8BN,CAAC;IA5BU,8BAAM,GAAb;QACU,IAAA,eAAuF,EAArF,wBAAS,EAAE,sBAAQ,EAAE,gCAAa,EAAE,oBAAO,EAAE,cAAI,EAAE,8BAAY,EAAE,gBAAK,CAAgB;QAC9F,IAAM,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY;YACpD,GAAC,cAAW,CAAC,OAAO,IAAG,OAAO;YAC9B,GAAC,OAAO,CAAC,mBAAmB,IAAG,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC9D,GAAC,OAAO,CAAC,qBAAqB,IAAG,aAAa;iBAC/C,SAAS,CAAC,CAAC;QAEd,IAAM,yBAAyB,GAAG,UAAU,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAExG,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,gBAAgB,EAAE,KAAK,EAAE,KAAK;YAC1C,6BAAK,SAAS,EAAE,OAAO,CAAC,cAAc;gBAClC,oBAAC,iCAAe,IAAC,OAAO,EAAE,OAAO;oBAC7B,6BAAK,SAAS,EAAE,yBAAyB,IACpC,IAAI,CACH,CACQ,CAChB;YACL,IAAI,CAAC,KAAK,CAAC,QAAQ;YACnB,OAAO,GAAG,SAAS,GAAG,YAAY,CACjC,CACT,CAAC;;IACN,CAAC;IAEM,yCAAiB,GAAxB,UAAyB,MAAqC;QAC1D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC3B,CAAC;IACL,oBAAC;AAAD,CAjCA,AAiCC,CAjCkC,KAAK,CAAC,SAAS,GAiCjD;AAjCY,aAAa;IADzB,wBAAiB;GACL,aAAa,CAiCzB;AAjCY,sCAAa","file":"headers/rowHeaderCell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Classes as CoreClasses, ContextMenuTarget, IProps } from \"@blueprintjs/core\";\n\nimport * as Classes from \"../common/classes\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { ResizeHandle } from \"../interactions/resizeHandle\";\n\nexport interface IRowHeaderCellProps extends IProps {\n    /**\n     * If `true`, will apply the active class to the header to indicate it is\n     * part of an external operation.\n     */\n    isActive?: boolean;\n\n    /**\n     * Specifies whether the full column is part of a selection.\n     */\n    isRowSelected?: boolean;\n\n    /**\n     * The name displayed in the header of the column.\n     */\n    name?: string;\n\n    /**\n     * If `true`, the row `name` will be replaced with a fixed-height skeleton and the `resizeHandle`\n     * will not be rendered. If passing in additional children to this component, you will also want\n     * to conditionally apply the `.pt-skeleton` class where appropriate.\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * An element, like a `<Menu>`, this is displayed by right-clicking\n     * anywhere in the header.\n     */\n    menu?: JSX.Element;\n\n    /**\n     * A `ResizeHandle` React component that allows users to drag-resize the\n     * header.\n     */\n    resizeHandle?: ResizeHandle;\n\n    /**\n     * CSS styles for the top level element.\n     */\n    style?: React.CSSProperties;\n}\n\nexport interface IRowHeaderState {\n    isActive: boolean;\n}\n\n@ContextMenuTarget\nexport class RowHeaderCell extends React.Component<IRowHeaderCellProps, IRowHeaderState> {\n    public state = {\n        isActive: false,\n    };\n\n    public render() {\n        const { className, isActive, isRowSelected, loading, name, resizeHandle, style } = this.props;\n        const rowHeaderClasses = classNames(Classes.TABLE_HEADER, {\n            [CoreClasses.LOADING]: loading,\n            [Classes.TABLE_HEADER_ACTIVE]: isActive || this.state.isActive,\n            [Classes.TABLE_HEADER_SELECTED]: isRowSelected,\n        }, className);\n\n        const loadableContentDivClasses = classNames(Classes.TABLE_ROW_NAME_TEXT, Classes.TABLE_TRUNCATED_TEXT);\n\n        return (\n            <div className={rowHeaderClasses} style={style}>\n                <div className={Classes.TABLE_ROW_NAME}>\n                    <LoadableContent loading={loading}>\n                        <div className={loadableContentDivClasses}>\n                            {name}\n                        </div>\n                    </LoadableContent>\n                </div>\n                {this.props.children}\n                {loading ? undefined : resizeHandle}\n            </div>\n        );\n    }\n\n    public renderContextMenu(_event: React.MouseEvent<HTMLElement>) {\n        return this.props.menu;\n    }\n}\n"]}