{"version":3,"sources":["../src/headers/columnHeader.tsx"],"names":[],"mappings":"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","file":"headers/columnHeader.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { Grid, IColumnIndices } from \"../common/grid\";\nimport { Rect, Utils } from \"../common/index\";\nimport { ICoordinateData } from \"../interactions/draggable\";\nimport { IIndexedResizeCallback, Resizable } from \"../interactions/resizable\";\nimport { ILockableLayout, Orientation } from \"../interactions/resizeHandle\";\nimport { DragSelectable, ISelectableProps } from \"../interactions/selectable\";\nimport { ILocator } from \"../locator\";\nimport { Regions } from \"../regions\";\nimport { ColumnHeaderCell, IColumnHeaderCellProps, IColumnHeaderRenderer } from \"./columnHeaderCell\";\n\nexport interface IColumnWidths {\n    minColumnWidth?: number;\n    maxColumnWidth?: number;\n    defaultColumnWidth?: number;\n}\n\nexport interface IColumnHeaderProps extends ISelectableProps, IColumnIndices, IColumnWidths, ILockableLayout {\n    /**\n     * A IColumnHeaderRenderer that, for each `<Column>`, will delegate to:\n     * 1. The `renderColumnHeader` method from the `<Column>`\n     * 2. A `<ColumnHeaderCell>` using the `name` prop from the `<Column>`\n     * 3. A `<ColumnHeaderCell>` with a `name` generated from `Utils.toBase26Alpha`\n     */\n    cellRenderer: IColumnHeaderRenderer;\n\n    /**\n     * The grid computes sizes of cells, rows, or columns from the\n     * configurable `columnWidths` and `rowHeights`.\n     */\n    grid: Grid;\n\n    /**\n     * If true, all `ColumnHeaderCell`s render their loading state except for\n     * those who have their `loading` prop explicitly set to false.\n     * @default false\n     */\n    loading: boolean;\n\n    /**\n     * Locates the row/column/cell given a mouse event.\n     */\n    locator: ILocator;\n\n    /**\n     * The `Rect` bounds of the visible viewport with respect to its parent\n     * scrollable pane.\n     */\n    viewportRect: Rect;\n\n    /**\n     * Enables/disables the resize interaction.\n     * @default true\n     */\n    isResizable?: boolean;\n\n    /**\n     * A callback invoked when user is done resizing the column\n     */\n    onColumnWidthChanged: IIndexedResizeCallback;\n\n    /**\n     * This callback is called while the user is resizing a column. The guides\n     * array contains pixel offsets for where to display the resize guides in\n     * the table body's overlay layer.\n     */\n    onResizeGuide: (guides: number[]) => void;\n}\n\n@PureRender\nexport class ColumnHeader extends React.Component<IColumnHeaderProps, {}> {\n    public static defaultProps = {\n        isResizable: true,\n        loading: false,\n    };\n\n    public render() {\n        const { grid, viewportRect, columnIndexStart, columnIndexEnd } = this.props;\n        const cells: Array<React.ReactElement<any>> = [];\n        for (let columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n            const extremaClasses = grid.getExtremaClasses(0, columnIndex, 1, columnIndexEnd);\n            const renderer = grid.isGhostIndex(-1, columnIndex) ? this.renderGhostCell : this.renderCell;\n            cells.push(renderer(columnIndex, extremaClasses));\n        }\n\n        // always set width so that the layout can push out the element unless it overflows.\n        const style: React.CSSProperties = {\n            width: `${grid.getRect().width}px`,\n        };\n\n        // use CSS translation to offset the cells\n        if (viewportRect != null) {\n            style.transform = `translate3d(${grid.getColumnRect(columnIndexStart).left - viewportRect.left}px, 0, 0)`;\n        }\n\n        const classes = classNames(Classes.TABLE_THEAD, Classes.TABLE_COLUMN_HEADER_TR, {\n            [Classes.TABLE_DRAGGABLE] : (this.props.onSelection != null),\n        });\n\n        return <div style={style} className={classes}>{cells}</div>;\n    }\n\n    private renderGhostCell = (columnIndex: number, extremaClasses: string[]) => {\n        const { grid, loading } = this.props;\n        const rect = grid.getGhostCellRect(0, columnIndex);\n        const style = {\n            flexBasis: `${rect.width}px`,\n            width: `${rect.width}px`,\n        };\n        return (\n            <ColumnHeaderCell\n                key={Classes.columnIndexClass(columnIndex)}\n                className={classNames(extremaClasses)}\n                loading={loading}\n                style={style}\n            />);\n    }\n\n    private renderCell = (columnIndex: number, extremaClasses: string[]) => {\n        const {\n            allowMultipleSelection,\n            cellRenderer,\n            grid,\n            isResizable,\n            loading,\n            maxColumnWidth,\n            minColumnWidth,\n            onFocus,\n            onColumnWidthChanged,\n            onLayoutLock,\n            onResizeGuide,\n            onSelection,\n            selectedRegions,\n            selectedRegionTransform,\n        } = this.props;\n\n        const rect = grid.getColumnRect(columnIndex);\n        const handleSizeChanged = (size: number) => {\n            onResizeGuide([rect.left + size + 1]);\n        };\n\n        const handleResizeEnd = (size: number) => {\n            onResizeGuide(null);\n            onColumnWidthChanged(columnIndex, size);\n        };\n\n        const handleDoubleClick = () => {\n            const width = this.props.locator.getWidestVisibleCellInColumn(columnIndex);\n            const clampedWidth = Utils.clamp(width, minColumnWidth, maxColumnWidth);\n            onResizeGuide(null);\n            onColumnWidthChanged(columnIndex, clampedWidth);\n        };\n\n        const cell = cellRenderer(columnIndex);\n        const className = classNames(cell.props.className, extremaClasses, {\n            [Classes.TABLE_DRAGGABLE]: (onSelection != null),\n        });\n        const cellLoading = cell.props.loading != null ? cell.props.loading : loading;\n        const isColumnSelected = Regions.hasFullColumn(selectedRegions, columnIndex);\n        const cellProps: IColumnHeaderCellProps = { className, isColumnSelected, loading: cellLoading };\n\n        return (\n            <DragSelectable\n                allowMultipleSelection={allowMultipleSelection}\n                key={Classes.columnIndexClass(columnIndex)}\n                locateClick={this.locateClick}\n                locateDrag={this.locateDrag}\n                onFocus={onFocus}\n                onSelection={onSelection}\n                selectedRegions={selectedRegions}\n                selectedRegionTransform={selectedRegionTransform}\n            >\n                <Resizable\n                    isResizable={isResizable}\n                    maxSize={maxColumnWidth}\n                    minSize={minColumnWidth}\n                    onDoubleClick={handleDoubleClick}\n                    onLayoutLock={onLayoutLock}\n                    onResizeEnd={handleResizeEnd}\n                    onSizeChanged={handleSizeChanged}\n                    orientation={Orientation.VERTICAL}\n                    size={rect.width}\n                >\n                    {React.cloneElement(cell, cellProps)}\n                </Resizable>\n            </DragSelectable>\n        );\n    }\n\n    private locateClick = (event: MouseEvent) => {\n        // Abort selection unless the mouse actually hit a table header. This allows\n        // users to supply interactive components in their renderHeader methods.\n        if (!ColumnHeaderCell.isHeaderMouseTarget(event.target as HTMLElement)) {\n            return null;\n        }\n\n        const col = this.props.locator.convertPointToColumn(event.clientX);\n        return Regions.column(col);\n    }\n\n    private locateDrag = (_event: MouseEvent, coords: ICoordinateData) => {\n        const colStart = this.props.locator.convertPointToColumn(coords.activation[0]);\n        const colEnd = this.props.locator.convertPointToColumn(coords.current[0]);\n        return Regions.column(colStart, colEnd);\n    }\n}\n"]}