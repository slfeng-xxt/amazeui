/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classNames = require("classnames");
var PureRender = require("pure-render-decorator");
var React = require("react");
var core_1 = require("@blueprintjs/core");
var Classes = require("../common/classes");
var loadableContent_1 = require("../common/loadableContent");
function HorizontalCellDivider() {
    return React.createElement("div", { className: Classes.TABLE_HORIZONTAL_CELL_DIVIDER });
}
exports.HorizontalCellDivider = HorizontalCellDivider;
var ColumnHeaderCell = (function (_super) {
    tslib_1.__extends(ColumnHeaderCell, _super);
    function ColumnHeaderCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isActive: false,
        };
        _this.getPopoverStateChangeHandler = function (isActive) { return function () {
            _this.setState({ isActive: isActive });
        }; };
        return _this;
    }
    /**
     * This method determines if a `MouseEvent` was triggered on a target that
     * should be used as the header click/drag target. This enables users of
     * this component to render fully interactive components in their header
     * cells without worry of selection or resize operations from capturing
     * their mouse events.
     */
    ColumnHeaderCell.isHeaderMouseTarget = function (target) {
        return target.classList.contains(Classes.TABLE_HEADER)
            || target.classList.contains(Classes.TABLE_COLUMN_NAME)
            || target.classList.contains(Classes.TABLE_INTERACTION_BAR)
            || target.classList.contains(Classes.TABLE_HEADER_CONTENT);
    };
    ColumnHeaderCell.prototype.render = function () {
        var _a = this.props, className = _a.className, isActive = _a.isActive, isColumnSelected = _a.isColumnSelected, loading = _a.loading, resizeHandle = _a.resizeHandle, style = _a.style;
        var classes = classNames(Classes.TABLE_HEADER, (_b = {},
            _b[Classes.TABLE_HEADER_ACTIVE] = isActive || this.state.isActive,
            _b[Classes.TABLE_HEADER_SELECTED] = isColumnSelected,
            _b[core_1.Classes.LOADING] = loading,
            _b), className);
        return (React.createElement("div", { className: classes, style: style },
            this.renderName(),
            this.maybeRenderContent(),
            loading ? undefined : resizeHandle));
        var _b;
    };
    ColumnHeaderCell.prototype.renderContextMenu = function (_event) {
        return this.props.menu;
    };
    ColumnHeaderCell.prototype.renderName = function () {
        var _a = this.props, loading = _a.loading, name = _a.name, renderName = _a.renderName, useInteractionBar = _a.useInteractionBar;
        var dropdownMenu = this.maybeRenderDropdownMenu();
        var defaultName = React.createElement("div", { className: Classes.TABLE_TRUNCATED_TEXT }, name);
        var nameComponent = (React.createElement(loadableContent_1.LoadableContent, { loading: loading, variableLength: true }, renderName == null ? defaultName : renderName(name)));
        if (useInteractionBar) {
            return (React.createElement("div", { className: Classes.TABLE_COLUMN_NAME, title: name },
                React.createElement("div", { className: Classes.TABLE_INTERACTION_BAR }, dropdownMenu),
                React.createElement(HorizontalCellDivider, null),
                React.createElement("div", { className: Classes.TABLE_COLUMN_NAME_TEXT }, nameComponent)));
        }
        else {
            return (React.createElement("div", { className: Classes.TABLE_COLUMN_NAME, title: name },
                dropdownMenu,
                React.createElement("div", { className: Classes.TABLE_COLUMN_NAME_TEXT }, nameComponent)));
        }
    };
    ColumnHeaderCell.prototype.maybeRenderContent = function () {
        if (this.props.children === null) {
            return undefined;
        }
        return (React.createElement("div", { className: Classes.TABLE_HEADER_CONTENT }, this.props.children));
    };
    ColumnHeaderCell.prototype.maybeRenderDropdownMenu = function () {
        var _a = this.props, menu = _a.menu, menuIconName = _a.menuIconName;
        if (menu == null) {
            return undefined;
        }
        var popoverTargetClasses = classNames(core_1.Classes.ICON_STANDARD, core_1.Classes.iconClass(menuIconName));
        var constraints = [{
                attachment: "together",
                pin: true,
                to: "window",
            }];
        return (React.createElement("div", { className: Classes.TABLE_TH_MENU_CONTAINER },
            React.createElement("div", { className: Classes.TABLE_TH_MENU_CONTAINER_BACKGROUND }),
            React.createElement(core_1.Popover, { tetherOptions: { constraints: constraints }, content: menu, position: core_1.Position.BOTTOM, className: Classes.TABLE_TH_MENU, popoverDidOpen: this.getPopoverStateChangeHandler(true), popoverWillClose: this.getPopoverStateChangeHandler(false), useSmartArrowPositioning: true },
                React.createElement("span", { className: popoverTargetClasses }))));
    };
    return ColumnHeaderCell;
}(React.Component));
ColumnHeaderCell.defaultProps = {
    isActive: false,
    menuIconName: "chevron-down",
    useInteractionBar: false,
};
ColumnHeaderCell = tslib_1.__decorate([
    core_1.ContextMenuTarget,
    PureRender
], ColumnHeaderCell);
exports.ColumnHeaderCell = ColumnHeaderCell;

//# sourceMappingURL=columnHeaderCell.js.map
