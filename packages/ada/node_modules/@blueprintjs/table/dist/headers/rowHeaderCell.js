/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classNames = require("classnames");
var React = require("react");
var core_1 = require("@blueprintjs/core");
var Classes = require("../common/classes");
var loadableContent_1 = require("../common/loadableContent");
var RowHeaderCell = (function (_super) {
    tslib_1.__extends(RowHeaderCell, _super);
    function RowHeaderCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isActive: false,
        };
        return _this;
    }
    RowHeaderCell.prototype.render = function () {
        var _a = this.props, className = _a.className, isActive = _a.isActive, isRowSelected = _a.isRowSelected, loading = _a.loading, name = _a.name, resizeHandle = _a.resizeHandle, style = _a.style;
        var rowHeaderClasses = classNames(Classes.TABLE_HEADER, (_b = {},
            _b[core_1.Classes.LOADING] = loading,
            _b[Classes.TABLE_HEADER_ACTIVE] = isActive || this.state.isActive,
            _b[Classes.TABLE_HEADER_SELECTED] = isRowSelected,
            _b), className);
        var loadableContentDivClasses = classNames(Classes.TABLE_ROW_NAME_TEXT, Classes.TABLE_TRUNCATED_TEXT);
        return (React.createElement("div", { className: rowHeaderClasses, style: style },
            React.createElement("div", { className: Classes.TABLE_ROW_NAME },
                React.createElement(loadableContent_1.LoadableContent, { loading: loading },
                    React.createElement("div", { className: loadableContentDivClasses }, name))),
            this.props.children,
            loading ? undefined : resizeHandle));
        var _b;
    };
    RowHeaderCell.prototype.renderContextMenu = function (_event) {
        return this.props.menu;
    };
    return RowHeaderCell;
}(React.Component));
RowHeaderCell = tslib_1.__decorate([
    core_1.ContextMenuTarget
], RowHeaderCell);
exports.RowHeaderCell = RowHeaderCell;

//# sourceMappingURL=rowHeaderCell.js.map
