{"version":3,"sources":["../src/headers/rowHeader.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAE/B,2CAA6C;AAG7C,iDAAgD;AAEhD,uDAA8E;AAC9E,6DAA4E;AAC5E,yDAA8E;AAE9E,sCAAqC;AACrC,iDAAqE;AA4DrE,IAAa,SAAS;IAAS,qCAAoC;IADnE;QAAA,qEA0HC;QAzFW,qBAAe,GAAG,UAAC,QAAgB,EAAE,cAAwB;YAC3D,IAAA,gBAA8B,EAA5B,cAAI,EAAE,oBAAO,CAAgB;YACrC,IAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAChD,IAAM,KAAK,GAAG;gBACV,MAAM,EAAK,IAAI,CAAC,MAAM,OAAI;aAC7B,CAAC;YACF,MAAM,CAAC,CACH,oBAAC,6BAAa,IACV,GAAG,EAAE,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,EACpC,SAAS,EAAE,UAAU,CAAC,cAAc,CAAC,EACrC,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,GACd,CAAC,CAAC;QACZ,CAAC,CAAA;QAEO,gBAAU,GAAG,UAAC,QAAgB,EAAE,cAAwB;YACtD,IAAA,gBAeQ,EAdV,kDAAsB,EACtB,cAAI,EACJ,4BAAW,EACX,oBAAO,EACP,8BAAY,EACZ,8BAAY,EACZ,oBAAO,EACP,8BAAY,EACZ,gCAAa,EACb,0CAAkB,EAClB,4BAAW,EACX,oCAAe,EACf,oCAAe,EACf,oDAAuB,CACZ;YAEf,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAEvC,IAAM,iBAAiB,GAAG,UAAC,IAAY;gBACnC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC;YAEF,IAAM,eAAe,GAAG,UAAC,IAAY;gBACjC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACpB,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACvC,CAAC,CAAC;YAEF,IAAM,IAAI,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,cAAc;gBAC7D,GAAC,OAAO,CAAC,eAAe,IAAG,WAAW,IAAI,IAAI;oBAChD,CAAC;YACH,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;YAC9E,IAAM,aAAa,GAAG,iBAAO,CAAC,UAAU,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YACpE,IAAM,SAAS,GAAwB,EAAE,SAAS,WAAA,EAAE,aAAa,eAAA,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;YAE1F,MAAM,CAAC,CACH,oBAAC,2BAAc,IACX,sBAAsB,EAAE,sBAAsB,EAC9C,GAAG,EAAE,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,EACpC,WAAW,EAAE,KAAI,CAAC,WAAW,EAC7B,UAAU,EAAE,KAAI,CAAC,UAAU,EAC3B,OAAO,EAAE,OAAO,EAChB,WAAW,EAAE,WAAW,EACxB,eAAe,EAAE,eAAe,EAChC,uBAAuB,EAAE,uBAAuB;gBAEhD,oBAAC,qBAAS,IACN,WAAW,EAAE,WAAW,EACxB,OAAO,EAAE,YAAY,EACrB,OAAO,EAAE,YAAY,EACrB,YAAY,EAAE,YAAY,EAC1B,WAAW,EAAE,eAAe,EAC5B,aAAa,EAAE,iBAAiB,EAChC,WAAW,EAAE,0BAAW,CAAC,UAAU,EACnC,IAAI,EAAE,IAAI,CAAC,MAAM,IAEhB,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAC5B,CACC,CACpB,CAAC;;QACN,CAAC,CAAA;QAEO,iBAAW,GAAG,UAAC,KAAiB;YACpC,IAAM,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAChE,MAAM,CAAC,iBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAA;QAEO,gBAAU,GAAG,UAAC,MAAkB,EAAE,MAAuB;YAC7D,IAAM,QAAQ,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5E,IAAM,MAAM,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,iBAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACzC,CAAC,CAAA;;IACL,CAAC;IAlHU,0BAAM,GAAb;QACU,IAAA,eAA+D,EAA7D,cAAI,EAAE,4BAAW,EAAE,gCAAa,EAAE,8BAAY,CAAgB;QAEtE,IAAM,KAAK,GAAmC,EAAE,CAAC;QACjD,GAAG,CAAC,CAAC,IAAI,QAAQ,GAAG,aAAa,EAAE,QAAQ,IAAI,WAAW,EAAE,QAAQ,EAAE,EAAE,CAAC;YACrE,IAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;YAC3E,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;YAC1F,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC;QACnD,CAAC;QAED,qFAAqF;QACrF,IAAM,KAAK,GAAwB;YAC/B,MAAM,EAAK,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,OAAI;SACvC,CAAC;QAEF,0CAA0C;QAC1C,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,KAAK,CAAC,SAAS,GAAG,qBAAkB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,YAAQ,CAAC;QACtG,CAAC;QAED,MAAM,CAAC,CACH,oBAAC,qBAAS;YAAC,6BAAK,KAAK,EAAE,KAAK,IAAG,KAAK,CAAO,CAAY,CAC1D,CAAC;IACN,CAAC;IA2FL,gBAAC;AAAD,CAzHA,AAyHC,CAzH8B,KAAK,CAAC,SAAS,GAyH7C;AAxHiB,sBAAY,GAAG;IACzB,WAAW,EAAE,KAAK;IAClB,OAAO,EAAE,KAAK;IACd,eAAe,EAAE,sBAAsB;CAC1C,CAAC;AALO,SAAS;IADrB,UAAU;GACE,SAAS,CAyHrB;AAzHY,8BAAS;AA2HtB;;;GAGG;AACH,gCAAuC,QAAgB;IACnD,MAAM,CAAC,oBAAC,6BAAa,IAAC,IAAI,EAAE,MAAG,QAAQ,GAAG,CAAC,CAAE,GAAG,CAAC;AACrD,CAAC;AAFD,wDAEC","file":"headers/rowHeader.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { Grid, IRowIndices } from \"../common/grid\";\nimport { Rect } from \"../common/rect\";\nimport { RoundSize } from \"../common/roundSize\";\nimport { ICoordinateData } from \"../interactions/draggable\";\nimport { IIndexedResizeCallback, Resizable } from \"../interactions/resizable\";\nimport { ILockableLayout, Orientation } from \"../interactions/resizeHandle\";\nimport { DragSelectable, ISelectableProps } from \"../interactions/selectable\";\nimport { ILocator } from \"../locator\";\nimport { Regions } from \"../regions\";\nimport { IRowHeaderCellProps, RowHeaderCell } from \"./rowHeaderCell\";\n\nexport type IRowHeaderRenderer = (rowIndex: number) => React.ReactElement<IRowHeaderCellProps>;\n\nexport interface IRowHeights {\n    minRowHeight?: number;\n    maxRowHeight?: number;\n    defaultRowHeight?: number;\n}\n\nexport interface IRowHeaderProps extends ISelectableProps, IRowIndices, IRowHeights, ILockableLayout {\n    /**\n     * Enables/disables the resize interaction.\n     * @default false\n     */\n    isResizable?: boolean;\n\n    /**\n     * The grid computes sizes of cells, rows, or columns from the\n     * configurable `columnWidths` and `rowHeights`.\n     */\n    grid: Grid;\n\n    /**\n     * If true, all `RowHeaderCell`s render their loading state except for those\n     * who have their `loading` prop explicitly set to false.\n     * @default false;\n     */\n    loading: boolean;\n\n    /**\n     * Locates the row/column/cell given a mouse event.\n     */\n    locator: ILocator;\n\n    /**\n     * This callback is called while the user is resizing a column. The guides\n     * array contains pixel offsets for where to display the resize guides in\n     * the table body's overlay layer.\n     */\n    onResizeGuide: (guides: number[]) => void;\n\n    /**\n     * A callback invoked when user is done resizing the column\n     */\n    onRowHeightChanged: IIndexedResizeCallback;\n\n    /**\n     * Renders the cell for each row header\n     */\n    renderRowHeader?: IRowHeaderRenderer;\n\n    /**\n     * The `Rect` bounds of the visible viewport with respect to its parent\n     * scrollable pane.\n     */\n    viewportRect: Rect;\n}\n\n@PureRender\nexport class RowHeader extends React.Component<IRowHeaderProps, {}> {\n    public static defaultProps = {\n        isResizable: false,\n        loading: false,\n        renderRowHeader: renderDefaultRowHeader,\n    };\n\n    public render() {\n        const { grid, rowIndexEnd, rowIndexStart, viewportRect } = this.props;\n\n        const cells: Array<React.ReactElement<any>> = [];\n        for (let rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            const extremaClasses = grid.getExtremaClasses(rowIndex, 0, rowIndexEnd, 1);\n            const renderer = grid.isGhostIndex(rowIndex, -1) ? this.renderGhostCell : this.renderCell;\n            cells.push(renderer(rowIndex, extremaClasses));\n        }\n\n        // always set height so that the layout can push out the element unless it overflows.\n        const style: React.CSSProperties = {\n            height: `${grid.getRect().height}px`,\n        };\n\n        // use CSS translation to offset the cells\n        if (viewportRect != null) {\n            style.transform = `translate3d(0, ${grid.getRowRect(rowIndexStart).top - viewportRect.top}px, 0)`;\n        }\n\n        return (\n            <RoundSize><div style={style}>{cells}</div></RoundSize>\n        );\n    }\n\n    private renderGhostCell = (rowIndex: number, extremaClasses: string[]) => {\n        const { grid, loading } = this.props;\n        const rect = grid.getGhostCellRect(rowIndex, 0);\n        const style = {\n            height: `${rect.height}px`,\n        };\n        return (\n            <RowHeaderCell\n                key={Classes.rowIndexClass(rowIndex)}\n                className={classNames(extremaClasses)}\n                loading={loading}\n                style={style}\n            />);\n    }\n\n    private renderCell = (rowIndex: number, extremaClasses: string[]) => {\n        const {\n            allowMultipleSelection,\n            grid,\n            isResizable,\n            loading,\n            maxRowHeight,\n            minRowHeight,\n            onFocus,\n            onLayoutLock,\n            onResizeGuide,\n            onRowHeightChanged,\n            onSelection,\n            renderRowHeader,\n            selectedRegions,\n            selectedRegionTransform,\n        } = this.props;\n\n        const rect = grid.getRowRect(rowIndex);\n\n        const handleSizeChanged = (size: number) => {\n            onResizeGuide([rect.top + size + 1]);\n        };\n\n        const handleResizeEnd = (size: number) => {\n            onResizeGuide(null);\n            onRowHeightChanged(rowIndex, size);\n        };\n\n        const cell = renderRowHeader(rowIndex);\n        const className = classNames(cell.props.className, extremaClasses, {\n            [Classes.TABLE_DRAGGABLE]: onSelection != null,\n        });\n        const cellLoading = cell.props.loading != null ? cell.props.loading : loading;\n        const isRowSelected = Regions.hasFullRow(selectedRegions, rowIndex);\n        const cellProps: IRowHeaderCellProps = { className, isRowSelected, loading: cellLoading };\n\n        return (\n            <DragSelectable\n                allowMultipleSelection={allowMultipleSelection}\n                key={Classes.rowIndexClass(rowIndex)}\n                locateClick={this.locateClick}\n                locateDrag={this.locateDrag}\n                onFocus={onFocus}\n                onSelection={onSelection}\n                selectedRegions={selectedRegions}\n                selectedRegionTransform={selectedRegionTransform}\n            >\n                <Resizable\n                    isResizable={isResizable}\n                    maxSize={maxRowHeight}\n                    minSize={minRowHeight}\n                    onLayoutLock={onLayoutLock}\n                    onResizeEnd={handleResizeEnd}\n                    onSizeChanged={handleSizeChanged}\n                    orientation={Orientation.HORIZONTAL}\n                    size={rect.height}\n                >\n                    {React.cloneElement(cell, cellProps)}\n                </Resizable>\n            </DragSelectable>\n        );\n    }\n\n    private locateClick = (event: MouseEvent) => {\n        const row = this.props.locator.convertPointToRow(event.clientY);\n        return Regions.row(row);\n    }\n\n    private locateDrag = (_event: MouseEvent, coords: ICoordinateData) => {\n        const rowStart = this.props.locator.convertPointToRow(coords.activation[1]);\n        const rowEnd = this.props.locator.convertPointToRow(coords.current[1]);\n        return Regions.row(rowStart, rowEnd);\n    }\n}\n\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\nexport function renderDefaultRowHeader(rowIndex: number) {\n    return <RowHeaderCell name={`${rowIndex + 1}`}/>;\n}\n"]}