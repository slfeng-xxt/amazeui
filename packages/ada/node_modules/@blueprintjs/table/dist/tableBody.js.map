{"version":3,"sources":["../src/tableBody.tsx"],"names":[],"mappings":"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","file":"tableBody.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport { emptyCellRenderer, ICellProps, ICellRenderer } from \"./cell/cell\";\nimport * as Classes from \"./common/classes\";\nimport { ContextMenuTargetWrapper } from \"./common/contextMenuTargetWrapper\";\nimport { Grid, IColumnIndices, IRowIndices } from \"./common/grid\";\nimport { Rect } from \"./common/rect\";\nimport { Utils } from \"./common/utils\";\nimport { ICoordinateData } from \"./interactions/draggable\";\nimport { IContextMenuRenderer, MenuContext } from \"./interactions/menus\";\nimport { DragSelectable, ISelectableProps } from \"./interactions/selectable\";\nimport { ILocator } from \"./locator\";\nimport { Regions } from \"./regions\";\n\nexport interface ITableBodyProps extends ISelectableProps, IRowIndices, IColumnIndices, IProps {\n    /**\n     * A cell renderer for the cells in the body.\n     */\n    cellRenderer: ICellRenderer;\n\n    /**\n     * The grid computes sizes of cells, rows, or columns from the\n     * configurable `columnWidths` and `rowHeights`.\n     */\n    grid: Grid;\n\n    /**\n     * If true, all `Cell`s render their loading state except for those who have\n     * their `loading` prop explicitly set to false.\n     */\n    loading: boolean;\n\n    /**\n     * Locates the row/column/cell given a mouse event.\n     */\n    locator: ILocator;\n\n    /**\n     * The `Rect` bounds of the visible viewport with respect to its parent\n     * scrollable pane.\n     */\n    viewportRect: Rect;\n\n    /**\n     * An optional callback for displaying a context menu when right-clicking\n     * on the table body. The callback is supplied with an `IMenuContext`\n     * containing the `IRegion`s of interest.\n     */\n    renderBodyContextMenu?: IContextMenuRenderer;\n}\n\n/**\n * For perf, we want to ignore changes to the `ISelectableProps` part of the\n * `ITableBodyProps` since those are only used when a context menu is launched.\n */\nconst UPDATE_PROPS_KEYS = [\n    \"grid\",\n    \"locator\",\n    \"viewportRect\",\n    \"cellRenderer\",\n    \"rowIndexStart\",\n    \"rowIndexEnd\",\n    \"columnIndexStart\",\n    \"columnIndexEnd\",\n    \"selectedRegions\",\n];\n\nexport class TableBody extends React.Component<ITableBodyProps, {}> {\n    public static defaultProps = {\n        loading: false,\n    };\n\n    /**\n     * Returns the array of class names that must be applied to each table\n     * cell so that we can locate any cell based on its coordinate.\n     */\n    public static cellClassNames(rowIndex: number, columnIndex: number) {\n        return [\n            Classes.rowCellIndexClass(rowIndex),\n            Classes.columnCellIndexClass(columnIndex),\n        ];\n    }\n\n    private static cellReactKey(rowIndex: number, columnIndex: number) {\n        return `cell-${rowIndex}-${columnIndex}`;\n    }\n\n    public shouldComponentUpdate(nextProps: ITableBodyProps) {\n        const shallowEqual = Utils.shallowCompareKeys(this.props, nextProps, UPDATE_PROPS_KEYS);\n        return !shallowEqual;\n    }\n\n    public render() {\n        const {\n            allowMultipleSelection,\n            columnIndexEnd,\n            columnIndexStart,\n            grid,\n            onFocus,\n            onSelection,\n            rowIndexEnd,\n            rowIndexStart,\n            selectedRegions,\n            selectedRegionTransform,\n        } = this.props;\n\n        const style = grid.getRect().sizeStyle();\n        const cells: Array<React.ReactElement<any>> = [];\n        for (let rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            for (let columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {\n                const extremaClasses = grid.getExtremaClasses(rowIndex, columnIndex, rowIndexEnd, columnIndexEnd);\n                const isGhost = grid.isGhostIndex(rowIndex, columnIndex);\n                cells.push(this.renderCell(rowIndex, columnIndex, extremaClasses, isGhost));\n            }\n        }\n\n        return (\n            <DragSelectable\n                allowMultipleSelection={allowMultipleSelection}\n                locateClick={this.locateClick}\n                locateDrag={this.locateDrag}\n                onFocus={onFocus}\n                onSelection={onSelection}\n                selectedRegions={selectedRegions}\n                selectedRegionTransform={selectedRegionTransform}\n            >\n                <ContextMenuTargetWrapper\n                    className={classNames(Classes.TABLE_BODY_VIRTUAL_CLIENT, Classes.TABLE_CELL_CLIENT)}\n                    renderContextMenu={this.renderContextMenu}\n                    style={style}\n                >\n                    {cells}\n                </ContextMenuTargetWrapper>\n            </DragSelectable>\n        );\n    }\n\n    public renderContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n        const { selectedRegions, renderBodyContextMenu, grid } = this.props;\n\n        if (renderBodyContextMenu == null) {\n            return undefined;\n        }\n\n        const target = this.locateClick(e.nativeEvent as MouseEvent);\n        return renderBodyContextMenu(new MenuContext(target, selectedRegions, grid.numRows, grid.numCols));\n    }\n\n   private renderCell = (rowIndex: number, columnIndex: number, extremaClasses: string[], isGhost: boolean) => {\n        const { cellRenderer, loading, grid } = this.props;\n        const baseCell = isGhost ? emptyCellRenderer() : cellRenderer(rowIndex, columnIndex);\n        const className = classNames(\n            TableBody.cellClassNames(rowIndex, columnIndex),\n            extremaClasses,\n            {\n                [Classes.TABLE_CELL_GHOST]: isGhost,\n                [Classes.TABLE_CELL_LEDGER_ODD]: (rowIndex % 2) === 1,\n                [Classes.TABLE_CELL_LEDGER_EVEN]: (rowIndex % 2) === 0,\n            },\n            baseCell.props.className,\n        );\n        const key = TableBody.cellReactKey(rowIndex, columnIndex);\n        const rect = isGhost ? grid.getGhostCellRect(rowIndex, columnIndex) : grid.getCellRect(rowIndex, columnIndex);\n        const cellLoading = baseCell.props.loading != null ? baseCell.props.loading : loading;\n\n        const style = { ...baseCell.props.style, ...Rect.style(rect) };\n        return React.cloneElement(baseCell, { className, key, loading: cellLoading, style } as ICellProps);\n    }\n\n    private locateClick = (event: MouseEvent) => {\n        const { col, row } = this.props.locator.convertPointToCell(event.clientX, event.clientY);\n        return Regions.cell(row, col);\n    }\n\n    private locateDrag = (_event: MouseEvent, coords: ICoordinateData) => {\n        const start = this.props.locator.convertPointToCell(coords.activation[0], coords.activation[1]);\n        const end = this.props.locator.convertPointToCell(coords.current[0], coords.current[1]);\n        return Regions.cell(start.row, start.col, end.row, end.col);\n    }\n}\n"]}