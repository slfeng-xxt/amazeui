/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PureRender = require("pure-render-decorator");
var React = require("react");
var ReactDOM = require("react-dom");
var core_1 = require("@blueprintjs/core");
var Classes = require("../common/classes");
var draggable_1 = require("../interactions/draggable");
var cell_1 = require("./cell");
var EditableCell = (function (_super) {
    tslib_1.__extends(EditableCell, _super);
    function EditableCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isEditing: false,
        };
        _this.handleEdit = function () {
            _this.setState({ isEditing: true });
        };
        _this.handleCancel = function (value) {
            _this.setState({ isEditing: false });
            core_1.Utils.safeInvoke(_this.props.onCancel, value);
        };
        _this.handleConfirm = function (value) {
            _this.setState({ isEditing: false });
            core_1.Utils.safeInvoke(_this.props.onConfirm, value);
        };
        _this.handleCellActivate = function (_event) {
            // Cancel edit of active cell when clicking away
            if (!_this.state.isEditing && document.activeElement instanceof HTMLElement && document.activeElement.blur) {
                document.activeElement.blur();
            }
            return true;
        };
        _this.handleCellDoubleClick = function (_event) {
            var cellElement = ReactDOM.findDOMNode(_this);
            if (cellElement == null) {
                return;
            }
            var focusable = cellElement.querySelector(".pt-editable-text");
            if (focusable.focus != null) {
                focusable.focus();
            }
        };
        return _this;
    }
    EditableCell.prototype.render = function () {
        var _a = this.props, intent = _a.intent, onChange = _a.onChange, value = _a.value;
        var isEditing = this.state.isEditing;
        var interactive = this.props.interactive || isEditing;
        return (React.createElement(cell_1.Cell, tslib_1.__assign({}, this.props, { truncated: false, interactive: interactive }),
            React.createElement(draggable_1.Draggable, { onActivate: this.handleCellActivate, onDoubleClick: this.handleCellDoubleClick, preventDefault: !interactive, stopPropagation: interactive },
                React.createElement(core_1.EditableText, { className: Classes.TABLE_EDITABLE_NAME, defaultValue: value, intent: intent, minWidth: null, onCancel: this.handleCancel, onChange: onChange, onConfirm: this.handleConfirm, onEdit: this.handleEdit, placeholder: "", selectAllOnFocus: true }))));
    };
    return EditableCell;
}(React.Component));
EditableCell = tslib_1.__decorate([
    PureRender
], EditableCell);
exports.EditableCell = EditableCell;

//# sourceMappingURL=editableCell.js.map
