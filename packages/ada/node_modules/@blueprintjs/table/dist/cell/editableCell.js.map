{"version":3,"sources":["../src/cell/editableCell.tsx"],"names":[],"mappings":"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","file":"cell/editableCell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { EditableText, Utils } from \"@blueprintjs/core\";\n\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"../interactions/draggable\";\nimport { Cell, ICellProps } from \"./cell\";\n\nexport interface IEditableCellProps extends ICellProps {\n    /**\n     * The value displayed in the text box. Be sure to update this value when\n     * rendering this component after a confirmed change.\n     */\n    value?: string;\n\n    /**\n     * A listener that is triggered if the user cancels the edit. This is\n     * important to listen to if you are doing anything with `onChange` events,\n     * since you'll likely want to revert whatever changes you made.\n     */\n    onCancel?: (value: string) => void;\n\n    /**\n     * A listener that is triggered as soon as the editable name is modified.\n     * This can be due, for example, to keyboard input or the clipboard.\n     */\n    onChange?: (value: string) => void;\n\n    /**\n     * A listener that is triggered once the editing is confirmed. This is\n     * usually due to the <code>return</code> (or <code>enter</code>) key press.\n     */\n    onConfirm?: (value: string) => void;\n}\n\nexport interface IEditableCellState {\n    isEditing: boolean;\n}\n\n@PureRender\nexport class EditableCell extends React.Component<IEditableCellProps, IEditableCellState> {\n    public state = {\n        isEditing: false,\n    };\n\n    public render() {\n        const { intent, onChange, value } = this.props;\n        const { isEditing } = this.state;\n        const interactive = this.props.interactive || isEditing;\n\n        return (\n            <Cell {...this.props} truncated={false} interactive={interactive}>\n                <Draggable\n                    onActivate={this.handleCellActivate}\n                    onDoubleClick={this.handleCellDoubleClick}\n                    preventDefault={!interactive}\n                    stopPropagation={interactive}\n                >\n                    <EditableText\n                        className={Classes.TABLE_EDITABLE_NAME}\n                        defaultValue={value}\n                        intent={intent}\n                        minWidth={null}\n                        onCancel={this.handleCancel}\n                        onChange={onChange}\n                        onConfirm={this.handleConfirm}\n                        onEdit={this.handleEdit}\n                        placeholder=\"\"\n                        selectAllOnFocus={true}\n                    />\n                </Draggable>\n            </Cell>\n        );\n    }\n\n    private handleEdit = () => {\n        this.setState({ isEditing: true });\n    }\n\n    private handleCancel = (value: string) => {\n        this.setState({ isEditing: false });\n        Utils.safeInvoke(this.props.onCancel, value);\n    }\n\n    private handleConfirm = (value: string) => {\n        this.setState({ isEditing: false });\n        Utils.safeInvoke(this.props.onConfirm, value);\n    }\n\n    private handleCellActivate = (_event: MouseEvent) => {\n        // Cancel edit of active cell when clicking away\n        if (!this.state.isEditing && document.activeElement instanceof HTMLElement && document.activeElement.blur) {\n            document.activeElement.blur();\n        }\n        return true;\n    }\n\n    private handleCellDoubleClick = (_event: MouseEvent) => {\n        const cellElement = ReactDOM.findDOMNode(this) as HTMLElement;\n        if (cellElement == null) {\n            return;\n        }\n\n        const focusable = (cellElement.querySelector(\".pt-editable-text\") as HTMLElement);\n        if (focusable.focus != null) {\n            focusable.focus();\n        }\n    }\n}\n"]}