/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
import { IProps } from "@blueprintjs/core";
import * as React from "react";
export declare enum TruncatedPopoverMode {
    ALWAYS = 0,
    NEVER = 1,
    WHEN_TRUNCATED = 2,
}
export interface ITruncatedFormatProps extends IProps {
    children?: string;
    /**
     * Should the component keep track of the truncation state of the string content. If true, the
     * value of `truncateLength` is ignored. When combined with a `showPopover` value of
     * `WHEN_TRUNCATED`, popovers will only render when necessary.
     * @default true;
     */
    detectTruncation?: boolean;
    /**
     * Sets the popover content style to `white-space: pre` if `true` or
     * `white-space: normal` if `false`.
     * @default false
     */
    preformatted?: boolean;
    /**
     * Configures when the popover is shown with the `TruncatedPopoverMode` enum.
     *
     * The enum values are:
     * - `ALWAYS`: show the popover (default).
     * - `NEVER`: don't show the popover.
     * - `WHEN_TRUNCATED`: show the popover only when the text is truncated.
     * @default WHEN_TRUNCATED
     */
    showPopover?: TruncatedPopoverMode;
    /**
     * Number of characters that are displayed before being truncated and appended with the
     * `truncationSuffix` prop. A value of 0 will disable truncation. This prop is ignored if
     * `detectTruncation` is `true`.
     * @default 80
     */
    truncateLength?: number;
    /**
     * The string that is appended to the display string if it is truncated.
     * @default "..."
     */
    truncationSuffix?: string;
}
export interface ITruncatedFormatState {
    isTruncated: boolean;
}
export declare class TruncatedFormat extends React.Component<ITruncatedFormatProps, ITruncatedFormatState> {
    static defaultProps: ITruncatedFormatProps;
    state: ITruncatedFormatState;
    private contentDiv;
    render(): JSX.Element;
    componentDidMount(): void;
    componentDidUpdate(): void;
    private handleContentDivRef;
    private shouldShowPopover(content);
    private setTruncationState();
}
