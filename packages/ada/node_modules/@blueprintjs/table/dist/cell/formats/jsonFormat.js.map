{"version":3,"sources":["../src/cell/formats/jsonFormat.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,6BAA+B;AAC/B,8CAAgD;AAChD,qDAAiG;AAqBjG;IAAgC,sCAAqC;IAArE;;IAsCA,CAAC;IA9BU,2BAAM,GAAb;QACU,IAAA,eAAyD,EAAvD,sBAAQ,EAAE,4CAAmB,EAAE,wBAAS,CAAgB;QAC1D,IAAA,oCAAW,CAAgB;QAEjC,wCAAwC;QACxC,IAAM,OAAO,GAAG,QAAQ,IAAI,IAAI,CAAC;QACjC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,WAAW,GAAG,sCAAoB,CAAC,KAAK,CAAC;QAC7C,CAAC;QACD,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS;YAC7C,GAAC,OAAO,CAAC,UAAU,IAAG,OAAO;gBAC/B,CAAC;QAEH,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,EAAE,CAAC,CAAC,mBAAmB,IAAI,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACtD,YAAY,GAAG,QAAQ,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,CACH,oBAAC,iCAAe,uBACR,IAAI,CAAC,KAAK,IACd,SAAS,EAAE,SAAS,EACpB,WAAW,EAAE,WAAW,KAEvB,YAAY,CACC,CACrB,CAAC;;IACN,CAAC;IACL,iBAAC;AAAD,CAtCA,AAsCC,CAtC+B,KAAK,CAAC,SAAS;AAC7B,uBAAY,GAAqB;IAC3C,gBAAgB,EAAE,IAAI;IACtB,mBAAmB,EAAE,IAAI;IACzB,WAAW,EAAE,sCAAoB,CAAC,cAAc;IAChD,SAAS,EAAE,UAAC,GAAQ,IAAK,OAAA,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAA9B,CAA8B;CAC1D,CAAC;AANO,gCAAU","file":"cell/formats/jsonFormat.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { ITruncatedFormatProps, TruncatedFormat, TruncatedPopoverMode } from \"./truncatedFormat\";\n\n/* istanbul ignore next */\nexport interface IJSONFormatProps extends ITruncatedFormatProps {\n    children?: any;\n\n    /**\n     * By default, we omit stringifying native JavaScript strings since\n     * `JSON.stringify` awkwardly adds double-quotes to the display value.\n     * This behavior can be turned off by setting this boolean to `false`.\n     * @default true\n     */\n    omitQuotesOnStrings?: boolean;\n\n    /**\n     * Optionally specify the stringify method. Default is `JSON.stringify`\n     * with 2-space indentation.\n     */\n    stringify?: (obj: any) => string;\n}\n\nexport class JSONFormat extends React.Component<IJSONFormatProps, {}> {\n    public static defaultProps: IJSONFormatProps = {\n        detectTruncation: true,\n        omitQuotesOnStrings: true,\n        showPopover: TruncatedPopoverMode.WHEN_TRUNCATED,\n        stringify: (obj: any) => (JSON.stringify(obj, null, 2)),\n    };\n\n    public render() {\n        const { children, omitQuotesOnStrings, stringify } = this.props;\n        let { showPopover } = this.props;\n\n        // always hide popover if value is nully\n        const isNully = children == null;\n        if (isNully) {\n            showPopover = TruncatedPopoverMode.NEVER;\n        }\n        const className = classNames(this.props.className, {\n            [Classes.TABLE_NULL]: isNully,\n        });\n\n        let displayValue = \"\";\n        if (omitQuotesOnStrings && typeof children === \"string\") {\n            displayValue = children;\n        } else {\n            displayValue = stringify(children);\n        }\n\n        return (\n            <TruncatedFormat\n                {...this.props}\n                className={className}\n                showPopover={showPopover}\n            >\n                {displayValue}\n            </TruncatedFormat>\n        );\n    }\n}\n"]}