{"version":3,"sources":["../src/cell/cell.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAC/B,2CAA6C;AAE7C,0CAAiF;AAEjF,6DAA4D;AA2C/C,QAAA,iBAAiB,GAAG,cAAM,OAAA,oBAAC,IAAI,OAAG,EAAR,CAAQ,CAAC;AAGhD,IAAa,IAAI;IAAS,gCAA+B;IAAzD;;IAqCA,CAAC;IA/BU,qBAAM,GAAb;QACU,IAAA,eAA6F,EAA3F,gBAAK,EAAE,kBAAM,EAAE,4BAAW,EAAE,oBAAO,EAAE,oBAAO,EAAE,wBAAS,EAAE,wBAAS,EAAE,sBAAQ,CAAgB;QAEpG,IAAM,OAAO,GAAG,UAAU,CACtB,OAAO,CAAC,UAAU,EAClB,cAAW,CAAC,WAAW,CAAC,MAAM,CAAC;YAE3B,GAAC,OAAO,CAAC,sBAAsB,IAAG,WAAW;YAC7C,GAAC,cAAW,CAAC,OAAO,IAAG,OAAO;YAC9B,GAAC,OAAO,CAAC,oBAAoB,IAAG,SAAS;iBAE7C,SAAS,CACZ,CAAC;QAEF,IAAM,WAAW,GAAG,UAAU;YAEtB,GAAC,OAAO,CAAC,oBAAoB,IAAG,SAAS;YACzC,GAAC,OAAO,CAAC,kBAAkB,IAAG,CAAC,QAAQ;gBAE9C,CAAC;QAEF,IAAM,OAAO,GAAG,6BAAK,SAAS,EAAE,WAAW,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAO,CAAC;QAEzE,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO;YACjD,oBAAC,iCAAe,IAAC,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,IAClD,OAAO,CACM,CAChB,CACT,CAAC;;IACN,CAAC;IACL,WAAC;AAAD,CArCA,AAqCC,CArCyB,KAAK,CAAC,SAAS,GAqCxC;AApCiB,iBAAY,GAAG;IACzB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,KAAK;CAClB,CAAC;AAJO,IAAI;IADhB,UAAU;GACE,IAAI,CAqChB;AArCY,oBAAI","file":"cell/cell.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\n\nimport { Classes as CoreClasses, IIntentProps, IProps } from \"@blueprintjs/core\";\n\nimport { LoadableContent } from \"../common/loadableContent\";\n\nexport interface ICellProps extends IIntentProps, IProps {\n    key?: string;\n\n    style?: React.CSSProperties;\n\n    /**\n     * If `true`, the cell will be rendered above overlay layers to enable mouse\n     * interactions within the cell.\n     * @default false\n     */\n    interactive?: boolean;\n\n    /**\n     * An optional native tooltip that is displayed on hover.\n     * If `true`, content will be replaced with a fixed-height skeleton.\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * An optional native tooltip that is displayed on hover.\n     */\n    tooltip?: string;\n\n    /**\n     * If `true`, the cell contents will be wrapped in a `div` with\n     * styling that will prevent the content from overflowing the cell.\n     * @default true\n     */\n    truncated?: boolean;\n\n    /**\n     * If `true`, the cell contents will be wrapped in a `div` with\n     * styling that will cause text to wrap, rather than displaying it on a single line.\n     * @default false\n     */\n    wrapText?: boolean;\n}\n\nexport type ICellRenderer = (rowIndex: number, columnIndex: number) => React.ReactElement<ICellProps>;\n\nexport const emptyCellRenderer = () => <Cell />;\n\n@PureRender\nexport class Cell extends React.Component<ICellProps, {}> {\n    public static defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n\n    public render() {\n        const { style, intent, interactive, loading, tooltip, truncated, className, wrapText } = this.props;\n\n        const classes = classNames(\n            Classes.TABLE_CELL,\n            CoreClasses.intentClass(intent),\n            {\n                [Classes.TABLE_CELL_INTERACTIVE]: interactive,\n                [CoreClasses.LOADING]: loading,\n                [Classes.TABLE_TRUNCATED_CELL]: truncated,\n            },\n            className,\n        );\n\n        const textClasses = classNames(\n            {\n                [Classes.TABLE_TRUNCATED_TEXT]: truncated,\n                [Classes.TABLE_NO_WRAP_TEXT]: !wrapText,\n            },\n        );\n\n        const content = <div className={textClasses}>{this.props.children}</div>;\n\n        return (\n            <div className={classes} style={style} title={tooltip}>\n                <LoadableContent loading={loading} variableLength={true}>\n                    {content}\n                </LoadableContent>\n            </div>\n        );\n    }\n}\n"]}