/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classNames = require("classnames");
var PureRender = require("pure-render-decorator");
var React = require("react");
var Classes = require("../common/classes");
var core_1 = require("@blueprintjs/core");
var loadableContent_1 = require("../common/loadableContent");
exports.emptyCellRenderer = function () { return React.createElement(Cell, null); };
var Cell = (function (_super) {
    tslib_1.__extends(Cell, _super);
    function Cell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Cell.prototype.render = function () {
        var _a = this.props, style = _a.style, intent = _a.intent, interactive = _a.interactive, loading = _a.loading, tooltip = _a.tooltip, truncated = _a.truncated, className = _a.className, wrapText = _a.wrapText;
        var classes = classNames(Classes.TABLE_CELL, core_1.Classes.intentClass(intent), (_b = {},
            _b[Classes.TABLE_CELL_INTERACTIVE] = interactive,
            _b[core_1.Classes.LOADING] = loading,
            _b[Classes.TABLE_TRUNCATED_CELL] = truncated,
            _b), className);
        var textClasses = classNames((_c = {},
            _c[Classes.TABLE_TRUNCATED_TEXT] = truncated,
            _c[Classes.TABLE_NO_WRAP_TEXT] = !wrapText,
            _c));
        var content = React.createElement("div", { className: textClasses }, this.props.children);
        return (React.createElement("div", { className: classes, style: style, title: tooltip },
            React.createElement(loadableContent_1.LoadableContent, { loading: loading, variableLength: true }, content)));
        var _b, _c;
    };
    return Cell;
}(React.Component));
Cell.defaultProps = {
    truncated: true,
    wrapText: false,
};
Cell = tslib_1.__decorate([
    PureRender
], Cell);
exports.Cell = Cell;

//# sourceMappingURL=cell.js.map
