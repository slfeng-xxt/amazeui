{"version":3,"sources":["../src/interactions/resizable.tsx"],"names":[],"mappings":"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","file":"interactions/resizable.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport { Utils } from \"../common/index\";\nimport { ILockableLayout, Orientation, ResizeHandle } from \"./resizeHandle\";\n\nexport type IIndexedResizeCallback = (index: number, size: number) => void;\n\nexport interface IResizableProps extends IProps, ILockableLayout {\n    /**\n     * Enables/disables the resize interaction for the column.\n     * @default true\n     */\n    isResizable?: boolean;\n\n    /**\n     * The optional maximum width of the column.\n     */\n    maxSize?: number;\n\n    /**\n     * The optional minimum width of the column.\n     */\n    minSize?: number;\n\n    /**\n     * A callback that is called while the user is dragging the resize\n     * handle.\n     *\n     * @param size is the resized size\n     */\n    onSizeChanged?: (size: number) => void;\n\n    /**\n     * A callback that is called when the user is done dragging the resize\n     * handle.\n     *\n     * @param size is the final resized size\n     */\n    onResizeEnd?: (size: number) => void;\n\n    /**\n     * A callback that is called when the user double clicks the resize handle\n     */\n    onDoubleClick?: () => void;\n\n    /**\n     * Determines how the resize handle is oriented in the resizable child.\n     */\n    orientation: Orientation;\n\n    /**\n     * The initial dimensional size.\n     */\n    size: number;\n\n}\n\nexport interface IResizeableState {\n    /**\n     * The dimensional size, respecting minimum and maximum constraints.\n     */\n    size?: number;\n\n    /**\n     * The dimensional size, ignoring minimum and maximum constraints.\n     */\n    unclampedSize?: number;\n}\n\n@PureRender\nexport class Resizable extends React.Component<IResizableProps, IResizeableState> {\n    public static defaultProps = {\n        isResizable: true,\n        minSize: 0,\n    };\n\n    public constructor(props: IResizableProps, context?: any) {\n        super(props, context);\n        const { size } = props;\n        this.state = {\n            size,\n            unclampedSize: size,\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: IResizableProps) {\n        const { size } = nextProps;\n        this.setState({\n            size,\n            unclampedSize: size,\n        });\n    }\n\n    public render() {\n        const child = React.Children.only(this.props.children);\n        const style = { ...child.props.style, ...this.getStyle() };\n\n        if (this.props.isResizable === false) {\n            return React.cloneElement(child, { style });\n        }\n\n        const resizeHandle = this.renderResizeHandle();\n        return React.cloneElement(child, { style, resizeHandle });\n    }\n\n    private renderResizeHandle() {\n        const { onLayoutLock, onDoubleClick, orientation } = this.props;\n\n        const onResizeMove = (_offset: number, delta: number) => {\n            this.offsetSize(delta);\n            if (this.props.onSizeChanged != null) {\n                this.props.onSizeChanged(this.state.size);\n            }\n        };\n        const onResizeEnd = (_offset: number) => {\n            // reset \"unclamped\" size on end\n            this.setState({unclampedSize: this.state.size});\n\n            if (this.props.onResizeEnd != null) {\n                this.props.onResizeEnd(this.state.size);\n            }\n        };\n\n        return (\n            <ResizeHandle\n                key=\"resize-handle\"\n                onDoubleClick={onDoubleClick}\n                onLayoutLock={onLayoutLock}\n                onResizeEnd={onResizeEnd}\n                onResizeMove={onResizeMove}\n                orientation={orientation}\n            />\n        );\n    }\n\n    /**\n     * Returns the CSS style to apply to the child element given the state's\n     * size value.\n     */\n    private getStyle(): React.CSSProperties {\n        if (this.props.orientation === Orientation.VERTICAL) {\n            return {\n                flexBasis: `${this.state.size}px`,\n                minWidth: \"0px\",\n                width: `${this.state.size}px`,\n            };\n        } else {\n            return {\n                flexBasis: `${this.state.size}px`,\n                height: `${this.state.size}px`,\n                minHeight: \"0px\",\n            };\n        }\n    }\n\n    private offsetSize(offset: number) {\n        const unclampedSize = this.state.unclampedSize + offset;\n        this.setState({\n            size : Utils.clamp(unclampedSize, this.props.minSize, this.props.maxSize),\n            unclampedSize,\n        });\n    }\n}\n"]}