{"version":3,"sources":["../src/interactions/selectable.tsx"],"names":[],"mappings":"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","file":"interactions/selectable.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport { IFocusedCellCoordinates } from \"../common/cell\";\nimport { DragEvents } from \"../interactions/dragEvents\";\nimport { Draggable, ICoordinateData, IDraggableProps } from \"../interactions/draggable\";\nimport { IRegion, RegionCardinality, Regions } from \"../regions\";\n\nexport type ISelectedRegionTransform = (region: IRegion, event: MouseEvent, coords?: ICoordinateData) => IRegion;\n\nexport interface ISelectableProps {\n    /**\n     * If `false`, only a single region of a single column/row/cell may be\n     * selected at one time. Using `ctrl` or `meta` key will have no effect,\n     * and a mouse drag will select the current column/row/cell only.\n     */\n    allowMultipleSelection: boolean;\n\n    /**\n     * When the user focuses something, this callback is called with new\n     * focused cell coordinates. This should be considered the new focused cell\n     * state for the entire table.\n     */\n    onFocus: (focusedCell: IFocusedCellCoordinates) => void;\n\n    /**\n     * When the user selects something, this callback is called with a new\n     * array of `Region`s. This array should be considered the new selection\n     * state for the entire table.\n     */\n    onSelection: (regions: IRegion[]) => void;\n\n    /**\n     * An array containing the table's selection Regions.\n     */\n    selectedRegions: IRegion[];\n\n    /**\n     * An optional transform function that will be applied to the located\n     * `Region`.\n     *\n     * This allows you to, for example, convert cell `Region`s into row\n     * `Region`s while maintaining the existing multi-select and meta-click\n     * functionality.\n     */\n    selectedRegionTransform?: ISelectedRegionTransform;\n}\n\nexport interface IDragSelectableProps extends ISelectableProps {\n    /**\n     * A callback that determines a `Region` for the single `MouseEvent`. If\n     * no valid region can be found, `null` may be returned.\n     */\n    locateClick: (event: MouseEvent) => IRegion;\n\n    /**\n     * A callback that determines a `Region` for the `MouseEvent` and\n     * coordinate data representing a drag. If no valid region can be found,\n     * `null` may be returned.\n     */\n    locateDrag: (event: MouseEvent, coords: ICoordinateData) => IRegion;\n}\n\n@PureRender\nexport class DragSelectable extends React.Component<IDragSelectableProps, {}> {\n    public static isLeftClick(event: MouseEvent) {\n        return event.button === 0;\n    }\n\n    private static getFocusCellCoordinatesFromRegion(region: IRegion) {\n        const regionCardinality = Regions.getRegionCardinality(region);\n\n        switch (regionCardinality) {\n            case RegionCardinality.FULL_TABLE:\n                return { col: 0, row: 0 };\n            case RegionCardinality.FULL_COLUMNS:\n                return { col: region.cols[0], row: 0 };\n            case RegionCardinality.FULL_ROWS:\n                return { col: 0, row: region.rows[0] };\n            case RegionCardinality.CELLS:\n                return { col: region.cols[0], row: region.rows[0] };\n            default:\n                return null;\n        }\n    }\n\n    public render() {\n        const draggableProps = this.getDraggableProps();\n        return (\n            <Draggable {...draggableProps} preventDefault={false}>\n                {this.props.children}\n            </Draggable>\n        );\n    }\n\n    private getDraggableProps(): IDraggableProps {\n        return this.props.onSelection == null ? {} : {\n            onActivate: this.handleActivate,\n            onClick: this.handleClick,\n            onDragMove: this.handleDragMove,\n        };\n    }\n\n    private handleActivate = (event: MouseEvent) => {\n        if (!DragSelectable.isLeftClick(event)) {\n            return false;\n        }\n\n        let region = this.props.locateClick(event);\n\n        if (!Regions.isValid(region)) {\n            return false;\n        }\n\n        const focusCellCoordinates = DragSelectable.getFocusCellCoordinatesFromRegion(region);\n\n        this.props.onFocus(focusCellCoordinates);\n\n        if (this.props.selectedRegionTransform != null) {\n            region = this.props.selectedRegionTransform(region, event);\n        }\n\n        const foundIndex = Regions.findMatchingRegion(this.props.selectedRegions, region);\n        if (foundIndex !== -1) {\n            // If re-clicking on an existing region, we either carefully\n            // remove it if the meta key is used or otherwise we clear the\n            // selection entirely.\n            if (DragEvents.isAdditive(event)) {\n                const newSelectedRegions = this.props.selectedRegions.slice();\n                newSelectedRegions.splice(foundIndex, 1);\n                this.props.onSelection(newSelectedRegions);\n            } else {\n                this.props.onSelection([]);\n            }\n            return false;\n        }\n\n        if (DragEvents.isAdditive(event) && this.props.allowMultipleSelection) {\n            this.props.onSelection(Regions.add(this.props.selectedRegions, region));\n        } else {\n            this.props.onSelection([region]);\n        }\n\n        return true;\n    }\n\n    private handleDragMove = (event: MouseEvent, coords: ICoordinateData) => {\n        let region = (this.props.allowMultipleSelection) ?\n            this.props.locateDrag(event, coords) :\n            this.props.locateClick(event);\n\n        if (!Regions.isValid(region)) {\n            return;\n        }\n\n        if (this.props.selectedRegionTransform != null) {\n            region = this.props.selectedRegionTransform(region, event, coords);\n        }\n\n        this.props.onSelection(Regions.update(this.props.selectedRegions, region));\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        if (!DragSelectable.isLeftClick(event)) {\n            return false;\n        }\n\n        let region = this.props.locateClick(event);\n\n        if (!Regions.isValid(region)) {\n            this.props.onSelection([]);\n            return false;\n        }\n\n        if (this.props.selectedRegionTransform != null) {\n            region = this.props.selectedRegionTransform(region, event);\n        }\n\n        if (this.props.selectedRegions.length > 0) {\n            this.props.onSelection(Regions.update(this.props.selectedRegions, region));\n        } else {\n            this.props.onSelection([region]);\n        }\n\n        return false;\n    }\n}\n"]}