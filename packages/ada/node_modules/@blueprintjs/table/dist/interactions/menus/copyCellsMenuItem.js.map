{"version":3,"sources":["../src/interactions/menus/copyCellsMenuItem.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,0CAA6D;AAC7D,6BAA+B;AAE/B,oDAAmD;AACnD,yCAAwC;AA4BxC;IAAuC,6CAA4C;IAAnF;QAAA,qEAcC;QATW,iBAAW,GAAG;YACZ,IAAA,gBAA6C,EAA3C,oBAAO,EAAE,4BAAW,EAAE,kBAAM,CAAgB;YACpD,IAAM,KAAK,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;YACvC,IAAM,MAAM,GAAG,iBAAO,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC1D,IAAM,OAAO,GAAG,qBAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC;QACL,CAAC,CAAA;;IACL,CAAC;IAbU,kCAAM,GAAb;QACI,MAAM,CAAC,oBAAC,eAAQ,uBAAK,IAAI,CAAC,KAAK,IAAE,OAAO,EAAE,IAAI,CAAC,WAAW,IAAI,CAAC;IACnE,CAAC;IAWL,wBAAC;AAAD,CAdA,AAcC,CAdsC,KAAK,CAAC,SAAS,GAcrD;AAdY,8CAAiB","file":"interactions/menus/copyCellsMenuItem.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IMenuItemProps, MenuItem } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nimport { Clipboard } from \"../../common/clipboard\";\nimport { Regions } from \"../../regions\";\nimport { IMenuContext } from \"./menuContext\";\n\nexport interface ICopyCellsMenuItemProps extends IMenuItemProps {\n    /**\n     * The `IMenuContext` that launched the menu.\n     */\n    context: IMenuContext;\n\n    /**\n     * A callback that returns the data for a specific cell. This need not\n     * match the value displayed in the `<Cell>` component. The value will be\n     * invisibly added as `textContent` into the DOM before copying.\n     */\n    getCellData: (row: number, col: number) => any;\n\n    /**\n     * If you want to do something after the copy or if you want to notify the\n     * user if a copy fails, you may provide this optional callback.\n     *\n     * Due to browser limitations, the copy can fail. This usually occurs if\n     * the selection is too large, like 20,000+ cells. The copy will also fail\n     * if the browser does not support the copy method (see\n     * `Clipboard.isCopySupported`).\n     */\n    onCopy?: (success: boolean) => void;\n}\n\nexport class CopyCellsMenuItem extends React.Component<ICopyCellsMenuItemProps, {}> {\n    public render() {\n        return <MenuItem {...this.props} onClick={this.handleClick} />;\n    }\n\n    private handleClick = () => {\n        const { context, getCellData, onCopy } = this.props;\n        const cells = context.getUniqueCells();\n        const sparse = Regions.sparseMapCells(cells, getCellData);\n        const success = Clipboard.copyCells(sparse);\n        if (onCopy != null) {\n            onCopy(success);\n        }\n    }\n}\n"]}