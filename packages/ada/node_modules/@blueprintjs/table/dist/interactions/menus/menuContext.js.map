{"version":3,"sources":["../src/interactions/menus/menuContext.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,yCAAkE;AAkClE;IAGI,qBACY,MAAe,EACf,eAA0B,EAC1B,OAAe,EACf,OAAe;QAHf,WAAM,GAAN,MAAM,CAAS;QACf,oBAAe,GAAf,eAAe,CAAW;QAC1B,YAAO,GAAP,OAAO,CAAQ;QACf,YAAO,GAAP,OAAO,CAAQ;QACvB,IAAI,CAAC,OAAO,GAAG,iBAAO,CAAC,cAAc,CAAC,eAAe,EAAE,MAAM,CAAC,GAAG,eAAe,GAAG,CAAE,MAAM,CAAE,CAAC;IAClG,CAAC;IAEM,+BAAS,GAAhB;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,wCAAkB,GAAzB;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAEM,gCAAU,GAAjB;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,oCAAc,GAArB;QACI,MAAM,CAAC,iBAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAClF,CAAC;IACL,kBAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,kCAAW","file":"interactions/menus/menuContext.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { ICellCoordinate, IRegion, Regions } from \"../../regions\";\n\nexport type IContextMenuRenderer = (context: IMenuContext) => JSX.Element;\n\nexport interface IMenuContext {\n    /**\n     * Returns an array of `IRegion`s that represent the user-intended context\n     * of this menu. If the mouse click was on a selection, the array will\n     * contain all selected regions. Otherwise it will have one `IRegion` that\n     * represents the clicked cell (the same `IRegion` from `getTarget`).\n     */\n    getRegions: () => IRegion[];\n\n    /**\n     * Returns the list of selected `IRegion` in the table, regardless of\n     * where the users clicked to launch the context menu. For the user-\n     * intended regions for this context, use `getRegions` instead.\n     */\n    getSelectedRegions: () => IRegion[];\n\n    /**\n     * Returns a region containing the single cell that was clicked to launch\n     * this context menu.\n     */\n    getTarget: () => IRegion;\n\n    /**\n     * Returns an array containing all of the unique, potentially non-\n     * contiguous, cells contained in all the regions from `getRegions`. The\n     * cell coordinates are sorted by rows then columns.\n     */\n    getUniqueCells: () => ICellCoordinate[];\n}\n\nexport class MenuContext implements IMenuContext {\n    private regions: IRegion[];\n\n    constructor(\n        private target: IRegion,\n        private selectedRegions: IRegion[],\n        private numRows: number,\n        private numCols: number) {\n        this.regions = Regions.containsRegion(selectedRegions, target) ? selectedRegions : [ target ];\n    }\n\n    public getTarget() {\n        return this.target;\n    }\n\n    public getSelectedRegions() {\n        return this.selectedRegions;\n    }\n\n    public getRegions() {\n        return this.regions;\n    }\n\n    public getUniqueCells() {\n        return Regions.enumerateUniqueCells(this.regions, this.numRows, this.numCols);\n    }\n}\n"]}