{"version":3,"sources":["../src/interactions/resizeHandle.tsx"],"names":[],"mappings":"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","file":"interactions/resizeHandle.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { IProps } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../common/classes\";\nimport { Draggable, ICoordinateData } from \"./draggable\";\n\nexport enum Orientation {\n    HORIZONTAL = 1,\n    VERTICAL = 0,\n}\n\nexport interface ILockableLayout {\n    onLayoutLock: (isLayoutLocked?: boolean) => void;\n}\n\nexport interface IResizeHandleProps extends IProps, ILockableLayout {\n    /**\n     * A callback that is called while the user is dragging the resize\n     * handle.\n     *\n     * @param offset is the difference between the initial and current coordinates\n     * @param delta is the difference between this and the previous offset\n     */\n    onResizeMove?: (offset: number, delta: number) => void;\n\n    /**\n     * A callback that is called when the user is done dragging the resize\n     * handle.\n     *\n     * @param offset is the difference between the initial and final coordinates\n     */\n    onResizeEnd?: (offset: number) => void;\n\n    /**\n     * A callback that is called when the user double clicks the resize handle\n     */\n    onDoubleClick?: () => void;\n\n    /**\n     * An enum value to indicate the orientation of the resize handle.\n     */\n    orientation: Orientation;\n}\n\nexport interface IResizeHandleState {\n    /**\n     * A boolean that is true while the user is dragging the resize handle\n     */\n    isDragging: boolean;\n}\n\nexport class ResizeHandle extends React.Component<IResizeHandleProps, IResizeHandleState> {\n    public state: IResizeHandleState = {\n        isDragging: false,\n    };\n\n    public render() {\n        const { onResizeMove, onResizeEnd, onDoubleClick, orientation } = this.props;\n        if (onResizeMove == null && onResizeEnd == null && onDoubleClick == null) {\n            return undefined;\n        }\n\n        const targetClasses = classNames(Classes.TABLE_RESIZE_HANDLE_TARGET, {\n            [Classes.TABLE_DRAGGING]: this.state.isDragging,\n            [Classes.TABLE_RESIZE_HORIZONTAL] : orientation === Orientation.HORIZONTAL,\n            [Classes.TABLE_RESIZE_VERTICAL] : orientation === Orientation.VERTICAL,\n        });\n\n        const handleClasses = classNames(Classes.TABLE_RESIZE_HANDLE, {\n            [Classes.TABLE_DRAGGING]: this.state.isDragging,\n        });\n\n        return (\n            <Draggable\n                onActivate={this.handleActivate}\n                onClick={this.handleClick}\n                onDoubleClick={this.handleDoubleClick}\n                onDragEnd={this.handleDragEnd}\n                onDragMove={this.handleDragMove}\n            >\n                <div className={targetClasses}>\n                    <div className={handleClasses} />\n                </div>\n            </Draggable>\n        );\n    }\n\n    private handleActivate = (event: MouseEvent) => {\n        this.setState({isDragging: true});\n        this.props.onLayoutLock(true);\n\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        return true;\n    }\n\n    private handleDragMove = (_event: MouseEvent, coords: ICoordinateData) => {\n        const orientationIndex = this.props.orientation as number;\n        if (this.props.onResizeMove != null) {\n            this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n        }\n    }\n\n    private handleDragEnd = (_event: MouseEvent, coords: ICoordinateData) => {\n        const orientationIndex = this.props.orientation as number;\n        this.setState({isDragging: false});\n        this.props.onLayoutLock(false);\n\n        if (this.props.onResizeMove != null) {\n            this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n        }\n        if (this.props.onResizeEnd != null) {\n            this.props.onResizeEnd(coords.offset[orientationIndex]);\n        }\n    }\n\n    private handleClick = (_event: MouseEvent) => {\n        this.setState({isDragging: false});\n        this.props.onLayoutLock(false);\n    }\n\n    private handleDoubleClick = (_event: MouseEvent) => {\n        this.setState({isDragging: false});\n        this.props.onLayoutLock(false);\n\n        if (this.props.onDoubleClick != null) {\n            this.props.onDoubleClick();\n        }\n    }\n}\n"]}