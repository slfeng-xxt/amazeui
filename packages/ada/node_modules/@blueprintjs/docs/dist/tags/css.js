/*
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var modifierTable_1 = require("../components/modifierTable");
var MODIFIER_PLACEHOLDER = /\{\{([\.\:]?)modifier\}\}/g;
var DEFAULT_MODIFIER = {
    documentation: "Default",
    name: "default",
};
var CssExample = function (_a) {
    var markup = _a.markup, markupHtml = _a.markupHtml, modifiers = _a.modifiers, reference = _a.reference;
    return (React.createElement("div", null,
        modifiers.length > 0 ? React.createElement(modifierTable_1.ModifierTable, { modifiers: modifiers }) : undefined,
        React.createElement("div", { className: "docs-example-wrapper", "data-reference": reference },
            renderMarkupForModifier(markup, DEFAULT_MODIFIER),
            modifiers.map(function (mod) { return renderMarkupForModifier(markup, mod); })),
        React.createElement("div", { className: "docs-markup", dangerouslySetInnerHTML: { __html: markupHtml } })));
};
function renderMarkupForModifier(markup, modifier) {
    var name = modifier.name;
    var html = markup.replace(MODIFIER_PLACEHOLDER, function (_, prefix) {
        if (prefix && name.charAt(0) === prefix) {
            return name.slice(1);
        }
        else if (!prefix) {
            return name;
        }
        else {
            return "";
        }
    });
    return (React.createElement("div", { className: "docs-example", "data-modifier": modifier.name, key: modifier.name },
        React.createElement("code", null, modifier.name),
        React.createElement("div", { dangerouslySetInnerHTML: { __html: html } })));
}
var CssTagRenderer = (function () {
    function CssTagRenderer(docs) {
        var _this = this;
        this.docs = docs;
        this.render = function (_a, key) {
            var reference = _a.value;
            var example = _this.docs.css[reference];
            if (example === undefined || example.reference === undefined) {
                throw new Error("Unknown @css reference: " + reference);
            }
            return React.createElement(CssExample, tslib_1.__assign({}, example, { key: key }));
        };
    }
    return CssTagRenderer;
}());
exports.CssTagRenderer = CssTagRenderer;

//# sourceMappingURL=css.js.map
