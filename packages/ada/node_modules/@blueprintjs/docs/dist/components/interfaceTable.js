/*
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@blueprintjs/core");
var classNames = require("classnames");
var React = require("react");
var block_1 = require("./block");
// HACKHACK support `code` blocks until we get real markdown parsing in ts-quick-docs
function dirtyMarkdown(text) {
    return { __html: text.replace("<", "&lt;")
            .replace(/```([^`]+)```/g, function (_, code) { return "<pre>" + code + "</pre>"; })
            .replace(/`([^`]+)`/g, function (_, code) { return "<code>" + code + "</code>"; }) };
}
function propTag(intent, title) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        children[_i - 2] = arguments[_i];
    }
    return (React.createElement(core_1.Tag, { key: title, className: core_1.Classes.MINIMAL, intent: intent },
        title,
        children));
}
var renderPropRow = function (prop) {
    var documentation = prop.documentation, inheritedFrom = prop.inheritedFrom, name = prop.name, optional = prop.optional;
    var _a = prop.tags, defaultValue = _a.default, deprecated = _a.deprecated, internal = _a.internal;
    if (internal) {
        return undefined;
    }
    var classes = classNames("docs-prop-name", {
        "docs-prop-is-deprecated": deprecated != null,
        "docs-prop-is-internal": internal,
        "docs-prop-is-required": !optional,
    });
    var tags = [];
    if (!optional) {
        tags.push(propTag(core_1.Intent.SUCCESS, "Required"));
    }
    if (deprecated) {
        var maybeMessage = typeof deprecated === "string"
            ? React.createElement("span", { dangerouslySetInnerHTML: dirtyMarkdown(": " + deprecated) })
            : "";
        tags.push(propTag(core_1.Intent.DANGER, "Deprecated", maybeMessage));
    }
    if (inheritedFrom != null) {
        tags.push(propTag(core_1.Intent.NONE, "Inherited", " from ", React.createElement("code", { key: "__code" }, inheritedFrom)));
    }
    var formattedType = prop.type.replace(/\b(JSX\.)?Element\b/, "JSX.Element");
    // TODO: this ignores tags in prop docs, but that's kind of OK cuz they all get processed
    // into prop.tags by the TS compiler.
    var html = documentation.contents.reduce(function (a, b) { return typeof b === "string" ? a + b : a; }, "");
    return (React.createElement("tr", { key: name },
        React.createElement("td", { className: classes },
            React.createElement("code", null, name)),
        React.createElement("td", { className: "docs-prop-details" },
            React.createElement("code", { className: "docs-prop-type" },
                React.createElement("strong", null, formattedType),
                React.createElement("em", { className: "docs-prop-default pt-text-muted" }, defaultValue)),
            React.createElement("div", { className: "docs-prop-description", dangerouslySetInnerHTML: { __html: html } }),
            React.createElement("p", { className: "docs-prop-tags" }, tags))));
};
exports.InterfaceTable = function (_a) {
    var iface = _a.iface, props = _a.props, tagRenderers = _a.tagRenderers;
    return (React.createElement("div", { className: "docs-modifiers" },
        React.createElement("div", { className: "docs-interface-name" }, iface.name),
        block_1.renderContentsBlock(iface.documentation.contents, tagRenderers),
        React.createElement("table", { className: "pt-table" },
            React.createElement("thead", null,
                React.createElement("tr", null,
                    React.createElement("th", null, "Prop"),
                    React.createElement("th", null, "Description"))),
            React.createElement("tbody", null, props.map(renderPropRow)))));
};
exports.InterfaceTable.displayName = "Docs.InterfaceTable";

//# sourceMappingURL=interfaceTable.js.map
