{"version":3,"sources":["../src/components/interfaceTable.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,0CAAyD;AACzD,uCAAyC;AAEzC,6BAA+B;AAG/B,iCAA8C;AAE9C,qFAAqF;AACrF,uBAAuB,IAAY;IAC/B,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC;aACrC,OAAO,CAAC,gBAAgB,EAAE,UAAC,CAAC,EAAE,IAAI,IAAK,OAAA,UAAQ,IAAI,WAAQ,EAApB,CAAoB,CAAC;aAC5D,OAAO,CAAC,YAAY,EAAE,UAAC,CAAC,EAAE,IAAI,IAAK,OAAA,WAAS,IAAI,YAAS,EAAtB,CAAsB,CAAC,EAAE,CAAC;AACtE,CAAC;AAED,iBAAiB,MAAc,EAAE,KAAa;IAAE,kBAA8B;SAA9B,UAA8B,EAA9B,qBAA8B,EAA9B,IAA8B;QAA9B,iCAA8B;;IAC1E,MAAM,CAAC,CACH,oBAAC,UAAG,IAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,cAAO,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM;QACtD,KAAK;QACL,QAAQ,CACP,CACT,CAAC;AACN,CAAC;AAED,IAAM,aAAa,GAAG,UAAC,IAA6B;IACxC,IAAA,kCAAa,EAAE,kCAAa,EAAE,gBAAI,EAAE,wBAAQ,CAAU;IACxD,IAAA,cAA2D,EAAzD,yBAAqB,EAAE,0BAAU,EAAE,sBAAQ,CAAe;IAElE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACX,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAE;QACzC,yBAAyB,EAAE,UAAU,IAAI,IAAI;QAC7C,uBAAuB,EAAE,QAAQ;QACjC,uBAAuB,EAAE,CAAC,QAAQ;KACrC,CAAC,CAAC;IAEH,IAAM,IAAI,GAAkB,EAAE,CAAC;IAC/B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAM,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;IACnD,CAAC;IACD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACb,IAAM,YAAY,GAAG,OAAO,UAAU,KAAK,QAAQ;cAC7C,8BAAM,uBAAuB,EAAE,aAAa,CAAC,IAAI,GAAG,UAAU,CAAC,GAAI;cACnE,EAAE,CAAC;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAM,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;IAClE,CAAC;IACD,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAM,CAAC,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,8BAAM,GAAG,EAAC,QAAQ,IAAE,aAAa,CAAQ,CAAC,CAAC,CAAC;IACtG,CAAC;IAED,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;IAE9E,yFAAyF;IACzF,qCAAqC;IACrC,IAAM,IAAI,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAS,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,OAAO,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAjC,CAAiC,EAAE,EAAE,CAAC,CAAC;IAEpG,MAAM,CAAC,CACH,4BAAI,GAAG,EAAE,IAAI;QACT,4BAAI,SAAS,EAAE,OAAO;YAAE,kCAAO,IAAI,CAAQ,CAAK;QAChD,4BAAI,SAAS,EAAC,mBAAmB;YAC7B,8BAAM,SAAS,EAAC,gBAAgB;gBAC5B,oCAAS,aAAa,CAAU;gBAAA,4BAAI,SAAS,EAAC,iCAAiC,IAAE,YAAY,CAAM,CAChG;YACP,6BAAK,SAAS,EAAC,uBAAuB,EAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,GAAI;YACpF,2BAAG,SAAS,EAAC,gBAAgB,IAAE,IAAI,CAAK,CACvC,CACJ,CACR,CAAC;AACN,CAAC,CAAC;AAQW,QAAA,cAAc,GAAoC,UAAC,EAA6B;QAA5B,gBAAK,EAAE,gBAAK,EAAE,8BAAY;IACvF,MAAM,CAAC,CACH,6BAAK,SAAS,EAAC,gBAAgB;QAC3B,6BAAK,SAAS,EAAC,qBAAqB,IAAE,KAAK,CAAC,IAAI,CAAO;QACtD,2BAAmB,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC;QAChE,+BAAO,SAAS,EAAC,UAAU;YACvB;gBACI;oBACI,uCAAa;oBACb,8CAAoB,CACnB,CACD;YACR,mCACK,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CACrB,CACJ,CACN,CACT,CAAC;AACN,CAAC,CAAC;AACF,sBAAc,CAAC,WAAW,GAAG,qBAAqB,CAAC","file":"components/interfaceTable.js","sourcesContent":["/*\n * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { Classes, Intent, Tag } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport { ITsInterfaceEntry } from \"documentalist/dist/client\";\nimport * as React from \"react\";\nimport { IInheritedPropertyEntry } from \"../common/propsStore\";\nimport { ITagRendererMap } from \"../tags\";\nimport { renderContentsBlock } from \"./block\";\n\n// HACKHACK support `code` blocks until we get real markdown parsing in ts-quick-docs\nfunction dirtyMarkdown(text: string) {\n    return { __html: text.replace(\"<\", \"&lt;\")\n        .replace(/```([^`]+)```/g, (_, code) => `<pre>${code}</pre>`)\n        .replace(/`([^`]+)`/g, (_, code) => `<code>${code}</code>`) };\n}\n\nfunction propTag(intent: Intent, title: string, ...children: React.ReactNode[]) {\n    return (\n        <Tag key={title} className={Classes.MINIMAL} intent={intent}>\n            {title}\n            {children}\n        </Tag>\n    );\n}\n\nconst renderPropRow = (prop: IInheritedPropertyEntry) => {\n    const { documentation, inheritedFrom, name, optional } = prop;\n    const { default: defaultValue, deprecated, internal } = prop.tags;\n\n    if (internal) {\n        return undefined;\n    }\n\n    const classes = classNames(\"docs-prop-name\", {\n        \"docs-prop-is-deprecated\": deprecated != null,\n        \"docs-prop-is-internal\": internal,\n        \"docs-prop-is-required\": !optional,\n    });\n\n    const tags: JSX.Element[] = [];\n    if (!optional) {\n        tags.push(propTag(Intent.SUCCESS, \"Required\"));\n    }\n    if (deprecated) {\n        const maybeMessage = typeof deprecated === \"string\"\n            ? <span dangerouslySetInnerHTML={dirtyMarkdown(\": \" + deprecated)} />\n            : \"\";\n        tags.push(propTag(Intent.DANGER, \"Deprecated\", maybeMessage));\n    }\n    if (inheritedFrom != null) {\n        tags.push(propTag(Intent.NONE, \"Inherited\", \" from \", <code key=\"__code\">{inheritedFrom}</code>));\n    }\n\n    const formattedType = prop.type.replace(/\\b(JSX\\.)?Element\\b/, \"JSX.Element\");\n\n    // TODO: this ignores tags in prop docs, but that's kind of OK cuz they all get processed\n    // into prop.tags by the TS compiler.\n    const html = documentation.contents.reduce<string>((a, b) => typeof b === \"string\" ? a + b : a, \"\");\n\n    return (\n        <tr key={name}>\n            <td className={classes}><code>{name}</code></td>\n            <td className=\"docs-prop-details\">\n                <code className=\"docs-prop-type\">\n                    <strong>{formattedType}</strong><em className=\"docs-prop-default pt-text-muted\">{defaultValue}</em>\n                </code>\n                <div className=\"docs-prop-description\" dangerouslySetInnerHTML={{ __html: html }} />\n                <p className=\"docs-prop-tags\">{tags}</p>\n            </td>\n        </tr>\n    );\n};\n\nexport interface IInterfaceTableProps {\n    iface: ITsInterfaceEntry;\n    props: IInheritedPropertyEntry[];\n    tagRenderers: ITagRendererMap;\n}\n\nexport const InterfaceTable: React.SFC<IInterfaceTableProps> = ({iface, props, tagRenderers }) => {\n    return (\n        <div className=\"docs-modifiers\">\n            <div className=\"docs-interface-name\">{iface.name}</div>\n            {renderContentsBlock(iface.documentation.contents, tagRenderers)}\n            <table className=\"pt-table\">\n                <thead>\n                    <tr>\n                        <th>Prop</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.map(renderPropRow)}\n                </tbody>\n            </table>\n        </div>\n    );\n};\nInterfaceTable.displayName = \"Docs.InterfaceTable\";\n"]}