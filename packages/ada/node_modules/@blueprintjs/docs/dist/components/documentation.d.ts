import { IMarkdownPluginData } from "documentalist/dist/client";
import * as React from "react";
import { IProps } from "@blueprintjs/core";
import { TagRenderer } from "../tags";
export interface IDocumentationProps extends IProps {
    /**
     * Default page to render in the absence of a hash route.
     */
    defaultPageId: string;
    /**
     * All the docs data from Documentalist.
     * Must include at least  `{ nav, pages }` from the MarkdownPlugin.
     */
    docs: IMarkdownPluginData;
    /**
     * Callback invoked whenever the component props or state change (specifically,
     * called in `componentDidMount` and `componentDidUpdate`).
     * Use it to run non-React code on the newly rendered sections.
     */
    onComponentUpdate?: (pageId: string) => void;
    /** Tag renderer functions. Unknown tags will log console errors. */
    tagRenderers: {
        [tag: string]: TagRenderer;
    };
    /**
     * Elements to render on the left side of the navbar, typically logo and title.
     * All elements will be wrapped in a single `.pt-navbar-group`.
     * @default "Documentation"
     */
    navbarLeft?: React.ReactNode;
    /**
     * Element to render on the right side of the navbar, typically links and actions.
     * All elements will be wrapped in a single `.pt-navbar-group`.
     */
    navbarRight?: React.ReactNode;
}
export interface IDocumentationState {
    activePageId: string;
    activeSectionId: string;
}
export declare class Documentation extends React.PureComponent<IDocumentationProps, IDocumentationState> {
    static defaultProps: {
        navbarLeft: string;
    };
    /** Map of section route to containing page reference. */
    private routeToPage;
    private contentElement;
    private navElement;
    private refHandlers;
    constructor(props: IDocumentationProps);
    render(): JSX.Element;
    renderHotkeys(): JSX.Element;
    componentWillMount(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(_prevProps: IDocumentationProps, prevState: IDocumentationState): void;
    private updateHash();
    private handleNavigation;
    private handleNextSection;
    private handlePreviousSection;
    private handleScroll;
    private maybeScrollToActivePageMenuItem();
    private scrollToActiveSection();
    private shiftSection(direction);
}
