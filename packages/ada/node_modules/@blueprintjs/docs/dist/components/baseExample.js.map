{"version":3,"sources":["../src/components/baseExample.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,6BAA+B;AAO/B;;;GAGG;AACH;IAAoC,uCAAyC;IAA7E;;IAqCA,CAAC;IAjCU,4BAAM,GAAb;QACI,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,qBAAmB,IAAI,CAAC,KAAK,CAAC,EAAE;YACtF,6BAAK,SAAS,EAAC,oBAAoB,IAAE,IAAI,CAAC,aAAa,EAAE,CAAO;YAChE,6BAAK,SAAS,EAAC,oBAAoB,IAAE,IAAI,CAAC,qBAAqB,EAAE,CAAO,CACtE,CACT,CAAC;IACN,CAAC;IAED;;OAEG;IACO,mCAAa,GAAvB;QACI,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACO,mCAAa,GAAvB;QACI,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAEO,2CAAqB,GAA7B;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACrC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,CAAC,IAAK,OAAA,6BAAK,SAAS,EAAC,2BAA2B,EAAC,GAAG,EAAE,CAAC,IAAG,MAAM,CAAO,EAAjE,CAAiE,CAAC,CAAC;QACzG,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;IACL,CAAC;IACL,kBAAC;AAAD,CArCA,AAqCC,CArCmC,KAAK,CAAC,aAAa,GAqCtD;AArCY,kCAAW;AAuCxB,0EAA0E;AAC1E,6BAAoC,OAAmC;IACnE,MAAM,CAAC,UAAC,KAAmC,IAAK,OAAA,OAAO,CAAE,KAAK,CAAC,MAA2B,CAAC,OAAO,CAAC,EAAnD,CAAmD,CAAC;AACxG,CAAC;AAFD,kDAEC;AAED,yEAAyE;AACzE,4BAAmC,OAAgC;IAC/D,MAAM,CAAC,UAAC,KAAmC,IAAK,OAAA,OAAO,CAAE,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,EAAjD,CAAiD,CAAC;AACtG,CAAC;AAFD,gDAEC;AAED,yEAAyE;AACzE,4BAAmC,OAAgC;IAC/D,MAAM,CAAC,kBAAkB,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;AAC1D,CAAC;AAFD,gDAEC","file":"components/baseExample.js","sourcesContent":["/*\n * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nexport interface IBaseExampleProps {\n    getTheme: () => string;\n    id: string;\n}\n\n/**\n * Starter class for all React example components.\n * Examples and options are rendered into separate containers.\n */\nexport class BaseExample<S> extends React.PureComponent<IBaseExampleProps, S> {\n    /** Define this prop to add a className to the example container */\n    protected className: string;\n\n    public render() {\n        return (\n            <div className={classNames(\"docs-example\", this.className)} data-example-id={this.props.id}>\n                <div className=\"docs-react-example\">{this.renderExample()}</div>\n                <div className=\"docs-react-options\">{this.actuallyRenderOptions()}</div>\n            </div>\n        );\n    }\n\n    /**\n     * Render the example element. Return any valid React node.\n     */\n    protected renderExample(): React.ReactNode | undefined {\n        return undefined;\n    }\n\n    /**\n     * Render the options controls. Return a single element for simple mode, or an array of arrays\n     * of elements to generate columns: each array will be its own column. When using array mode,\n     * the inner elements will each need the `key` prop.\n     */\n    protected renderOptions(): JSX.Element | JSX.Element[][] {\n        return [];\n    }\n\n    private actuallyRenderOptions(): JSX.Element | JSX.Element[] {\n        const options = this.renderOptions();\n        if (Array.isArray(options)) {\n            return options.map((column, i) => <div className=\"docs-react-options-column\" key={i}>{column}</div>);\n        } else {\n            return options;\n        }\n    }\n}\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) => handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) => handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n"]}