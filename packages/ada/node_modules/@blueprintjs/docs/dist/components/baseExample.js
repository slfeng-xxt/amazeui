/*
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classNames = require("classnames");
var React = require("react");
/**
 * Starter class for all React example components.
 * Examples and options are rendered into separate containers.
 */
var BaseExample = (function (_super) {
    tslib_1.__extends(BaseExample, _super);
    function BaseExample() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseExample.prototype.render = function () {
        return (React.createElement("div", { className: classNames("docs-example", this.className), "data-example-id": this.props.id },
            React.createElement("div", { className: "docs-react-example" }, this.renderExample()),
            React.createElement("div", { className: "docs-react-options" }, this.actuallyRenderOptions())));
    };
    /**
     * Render the example element. Return any valid React node.
     */
    BaseExample.prototype.renderExample = function () {
        return undefined;
    };
    /**
     * Render the options controls. Return a single element for simple mode, or an array of arrays
     * of elements to generate columns: each array will be its own column. When using array mode,
     * the inner elements will each need the `key` prop.
     */
    BaseExample.prototype.renderOptions = function () {
        return [];
    };
    BaseExample.prototype.actuallyRenderOptions = function () {
        var options = this.renderOptions();
        if (Array.isArray(options)) {
            return options.map(function (column, i) { return React.createElement("div", { className: "docs-react-options-column", key: i }, column); });
        }
        else {
            return options;
        }
    };
    return BaseExample;
}(React.PureComponent));
exports.BaseExample = BaseExample;
/** Event handler that exposes the target element's value as a boolean. */
function handleBooleanChange(handler) {
    return function (event) { return handler(event.target.checked); };
}
exports.handleBooleanChange = handleBooleanChange;
/** Event handler that exposes the target element's value as a string. */
function handleStringChange(handler) {
    return function (event) { return handler(event.target.value); };
}
exports.handleStringChange = handleStringChange;
/** Event handler that exposes the target element's value as a number. */
function handleNumberChange(handler) {
    return handleStringChange(function (value) { return handler(+value); });
}
exports.handleNumberChange = handleNumberChange;

//# sourceMappingURL=baseExample.js.map
