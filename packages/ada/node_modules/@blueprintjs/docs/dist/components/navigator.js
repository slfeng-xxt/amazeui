/*
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@blueprintjs/core");
var classNames = require("classnames");
var fuzzaldrin_plus_1 = require("fuzzaldrin-plus");
var React = require("react");
var react_dom_1 = require("react-dom");
var utils_1 = require("../common/utils");
var baseExample_1 = require("./baseExample");
var Navigator = (function (_super) {
    tslib_1.__extends(Navigator, _super);
    function Navigator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            query: "",
            selectedIndex: 0,
        };
        // this guy must be defined before he's used in handleQueryChange
        // and it just makes sense to be up here with state init
        // tslint:disable:member-ordering
        _this.resetState = function (query) {
            if (query === void 0) { query = ""; }
            return _this.setState({ query: query, selectedIndex: 0 });
        };
        _this.handleQueryChange = baseExample_1.handleStringChange(_this.resetState);
        _this.handleKeyDown = utils_1.createKeyEventHandler((_a = {},
            _a[core_1.Keys.ARROW_DOWN] = _this.selectNext(),
            _a[core_1.Keys.ARROW_UP] = _this.selectNext(-1),
            _a[core_1.Keys.ENTER] = function () {
                var activeItem = react_dom_1.findDOMNode(_this).query("." + core_1.Classes.MENU_ITEM + "." + core_1.Classes.ACTIVE);
                if (activeItem != null) {
                    activeItem.click();
                }
            },
            _a));
        _this.handleFocusSearch = function (e) {
            if (_this.inputRef != null) {
                e.preventDefault();
                _this.inputRef.focus();
            }
        };
        _this.handleSetSearchInputRef = function (ref) {
            _this.inputRef = ref;
        };
        _this.handlePopoverInteraction = function (nextOpenState) {
            if (!nextOpenState) {
                _this.resetState();
            }
        };
        _this.handleResultHover = function (e) {
            var el = e.currentTarget;
            if (el.parentElement != null) {
                var selectedIndex = Array.prototype.indexOf.call(el.parentElement.children, el);
                _this.setState(tslib_1.__assign({}, _this.state, { selectedIndex: selectedIndex }));
            }
        };
        return _this;
        var _a;
    }
    Navigator.prototype.render = function () {
        return (React.createElement(core_1.Popover, { autoFocus: false, enforceFocus: false, className: "docs-navigator", content: this.renderPopover(), onInteraction: this.handlePopoverInteraction, inline: true, isOpen: this.state.query.length > 0, popoverClassName: core_1.Classes.MINIMAL, position: core_1.Position.BOTTOM_LEFT },
            React.createElement(core_1.InputGroup, { autoFocus: true, inputRef: this.handleSetSearchInputRef, leftIconName: "search", onChange: this.handleQueryChange, onKeyDown: this.handleKeyDown, placeholder: "Search...", type: "search", value: this.state.query })));
    };
    Navigator.prototype.renderHotkeys = function () {
        return React.createElement(core_1.Hotkeys, null,
            React.createElement(core_1.Hotkey, { global: true, combo: "shift + s", label: "Focus documentation search box", onKeyDown: this.handleFocusSearch }));
    };
    Navigator.prototype.componentDidMount = function () {
        var _this = this;
        this.sections = [];
        utils_1.eachLayoutNode(this.props.items, function (node, parents) {
            var route = node.route, title = node.title;
            var path = parents.map(function (p) { return p.title; }).reverse();
            var filterKey = path.concat([title]).join("/");
            _this.sections.push({ filterKey: filterKey, path: path, route: route, title: title });
        });
    };
    Navigator.prototype.getMatches = function () {
        return fuzzaldrin_plus_1.filter(this.sections, this.state.query, {
            key: "filterKey",
        });
    };
    Navigator.prototype.renderPopover = function () {
        var _this = this;
        var matches = this.getMatches();
        var selectedIndex = Math.min(matches.length, this.state.selectedIndex);
        var items = matches.map(function (section, index) {
            var isSelected = index === selectedIndex;
            var classes = classNames(core_1.Classes.MENU_ITEM, core_1.Classes.POPOVER_DISMISS, (_a = {},
                _a[core_1.Classes.ACTIVE] = isSelected,
                _a[core_1.Classes.INTENT_PRIMARY] = isSelected,
                _a));
            var headerHtml = { __html: section.title };
            // add $icons16-family to font stack to support mixing icons with regular text!
            var pathHtml = { __html: section.path.join(core_1.IconContents.CARET_RIGHT) };
            return (React.createElement("a", { className: classes, href: "#" + section.route, key: section.route, onMouseEnter: _this.handleResultHover },
                React.createElement("small", { className: "docs-result-path pt-text-muted", dangerouslySetInnerHTML: pathHtml }),
                React.createElement("div", { dangerouslySetInnerHTML: headerHtml })));
            var _a;
        });
        if (items.length === 0) {
            items = [
                React.createElement("a", { className: classNames(core_1.Classes.MENU_ITEM, core_1.Classes.DISABLED), key: "none" },
                    "No results. Press ",
                    React.createElement("code", null, "esc"),
                    " to reset."),
            ];
        }
        return React.createElement(core_1.Menu, null, items);
    };
    Navigator.prototype.selectNext = function (direction) {
        var _this = this;
        if (direction === void 0) { direction = 1; }
        return function () { return _this.setState(tslib_1.__assign({}, _this.state, { selectedIndex: Math.max(0, _this.state.selectedIndex + direction) })); };
    };
    return Navigator;
}(React.PureComponent));
Navigator = tslib_1.__decorate([
    core_1.HotkeysTarget
], Navigator);
exports.Navigator = Navigator;

//# sourceMappingURL=navigator.js.map
