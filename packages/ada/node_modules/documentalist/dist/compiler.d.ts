/// <reference types="marked" />
import { IBlock } from "./client";
import { ICompiler } from "./plugins";
export interface ICompilerOptions {
    /** Options for markdown rendering. See https://github.com/chjj/marked#options-1. */
    markdown?: MarkedOptions;
    /**
     * Reserved @tags that should be preserved in the contents string.
     * A common use case is allowing specific code constructs, like `@Decorator` names.
     * Do not include the `@` prefix in the strings.
     */
    reservedTags?: string[];
}
export declare class Compiler implements ICompiler {
    private options;
    constructor(options: ICompilerOptions);
    objectify<T>(array: T[], getKey: (item: T) => string): {
        [key: string]: T;
    };
    renderBlock: (blockContent: string, reservedTagWords?: string[] | undefined) => IBlock;
    renderMarkdown: (markdown: string) => string;
    /**
     * Converts the content string into an array of `ContentNode`s. If the
     * `contents` option is `html`, the string nodes will also be rendered with
     * markdown.
     */
    private renderContents(content, reservedTagWords?);
    /**
     * Extracts optional YAML frontmatter metadata block from the beginning of a
     * markdown file and parses it to a JS object.
     */
    private extractMetadata(text);
    /**
     * Splits the content string when it encounters a line that begins with a
     * `@tag`. You may prevent this splitting by specifying an array of reserved
     * tag names.
     */
    private parseTags(content, reservedWords?);
}
