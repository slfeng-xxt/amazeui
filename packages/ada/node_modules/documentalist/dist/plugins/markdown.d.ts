import { IMarkdownPluginData, IPageData, IPageNode } from "../client";
import { ICompiler, IFile, IPlugin } from "./plugin";
export interface IMarkdownPluginOptions {
    /**
     * Page reference that lists the nav roots.
     * @default "_nav"
     */
    navPage: string;
}
export declare class MarkdownPlugin implements IPlugin<IMarkdownPluginData> {
    private options;
    constructor(options?: Partial<IMarkdownPluginOptions>);
    /**
     * Reads the given set of markdown files and adds their data to the internal storage.
     * Returns a plain object mapping page references to their data.
     */
    compile(markdownFiles: IFile[], compiler: ICompiler): {
        nav: IPageNode[];
        pages: {
            [key: string]: IPageData;
        };
    };
    private blockToPage(filePath, block);
    /** Convert each file to IPageData and populate store. */
    private buildPageStore(markdownFiles, {renderBlock});
    /**
     * Computes `route` for the given `node` based on its parent.
     * If node is a page, then it also computes `route` for each heading and recurses through child
     * pages.
     */
    private recurseRoute(pageMap, node, parent?);
    private resolveRoutes(pageMap, nav);
    /** Iterates `contents` array and inlines any `@include page` tags. */
    private resolveIncludeTags(pageStore);
}
