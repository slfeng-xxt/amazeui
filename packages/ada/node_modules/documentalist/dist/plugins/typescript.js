/**
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain
 * a copy of the license in the LICENSE and PATENTS files in the root of this
 * repository.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_quick_docs_1 = require("ts-quick-docs");
class TypescriptPlugin {
    constructor(
        /**
         * Options to `ts-quick-docs`, mostly for customizing which symbols appear in the output.
         */
        options = {}, 
        /**
         * Compiler options for Typescript program used to "read" your typings.
         * (This is distinct from whatever options you need to build your typings.)
         * If omitted, the default compiler options are used.
         */
        // HACK: using any to avoid duplicate typings issue with ts.CompilerOptions
        compilerOptions = {}) {
        this.options = options;
        this.compilerOptions = compilerOptions;
    }
    compile(files, { renderBlock, objectify }) {
        const entries = ts_quick_docs_1.default.fromFiles(files.map((f) => f.path), this.compilerOptions, this.options)
            .map((entry) => (Object.assign({}, entry, { documentation: renderBlock(entry.documentation), properties: entry.properties.map((prop) => (Object.assign({}, prop, { documentation: renderBlock(prop.documentation) }))) })));
        const ts = objectify(entries, (e) => e.name);
        return { ts };
    }
}
exports.TypescriptPlugin = TypescriptPlugin;
