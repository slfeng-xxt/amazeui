/**
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain
 * a copy of the license in the LICENSE and PATENTS files in the root of this
 * repository.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const kss = require("kss");
const path = require("path");
class KssPlugin {
    constructor(options) {
        this.options = options;
    }
    compile(cssFiles, dm) {
        const styleguide = this.parseFiles(cssFiles);
        const sections = styleguide.sections().map((s) => convertSection(s, dm));
        const css = dm.objectify(sections, (s) => s.reference);
        return { css };
    }
    parseFiles(files) {
        const input = files.map((file) => ({
            base: path.dirname(file.path),
            contents: file.read(),
            path: file.path,
        }));
        const options = Object.assign({ multiline: false, markdown: false }, this.options);
        return kss.parse(input, options);
    }
}
exports.KssPlugin = KssPlugin;
function convertSection(section, dm) {
    return {
        documentation: dm.renderMarkdown(section.description()),
        markup: section.markup() || "",
        markupHtml: dm.renderMarkdown(`\`\`\`html\n${section.markup() || ""}\n\`\`\``),
        modifiers: section.modifiers().map((mod) => convertModifier(mod, dm)),
        reference: section.reference(),
    };
}
function convertModifier(mod, dm) {
    return {
        documentation: dm.renderMarkdown(mod.description()),
        name: mod.name(),
    };
}
