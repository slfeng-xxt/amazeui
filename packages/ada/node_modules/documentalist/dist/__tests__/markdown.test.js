/**
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain
 * a copy of the license in the LICENSE and PATENTS files in the root of this
 * repository.
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const markdown_1 = require("../plugins/markdown");
const TEST_MARKDOWN = `---
key: value
---

@# I'm special

## I'm regular

@othertag params
`;
const TEST_NAV = `
@page test
`;
const TEST_FILES = [
    {
        path: "/whatever/other/test.md",
        read: () => TEST_MARKDOWN,
    }, {
        path: "/who/cares/_nav.md",
        read: () => TEST_NAV,
    },
];
describe("Plugins", () => {
    const dm = index_1.Documentalist.create()
        .use(".md", new markdown_1.MarkdownPlugin());
    it("can document Markdown files", () => __awaiter(this, void 0, void 0, function* () {
        const docs = yield dm.documentFiles(TEST_FILES);
        const page = docs.pages["test"];
        expect(page).toBeDefined();
        expect(page.metadata["key"]).toBe("value");
        expect(page.contents).toHaveLength(3);
        expect(page.contents[2].tag).toBe("othertag");
    }));
});
