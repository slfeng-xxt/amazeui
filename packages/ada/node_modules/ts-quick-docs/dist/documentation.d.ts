import * as ts from "typescript";
import { IInterfaceEntry } from "./interfaces";
export * from "./interfaces";
export interface IDocumentationOptions {
    excludeNames?: Array<string | RegExp>;
    excludePaths?: Array<string | RegExp>;
    includeBasicTypeProperties?: boolean;
    includeDefinitionFiles?: boolean;
}
export default class Documentation {
    static fromProgram(program: ts.Program, options?: IDocumentationOptions): IInterfaceEntry[];
    static fromFiles(filePaths: string[], compilerOptions: ts.CompilerOptions, options?: IDocumentationOptions): IInterfaceEntry[];
    private program;
    private options;
    private readonly checker;
    constructor(program: ts.Program, options?: IDocumentationOptions);
    extract(): IInterfaceEntry[];
    private getFileName(node);
    private getJsDocTags(symbol);
    private getTypeOfSymbol(symbol);
    private getTypeString(symbol);
    private serializeSymbol(symbol, fileName);
    private serializeDeclaration;
    private serializeInterface(symbol, fileName);
    private serializeVariable(symbol, fileName);
    private filterValueDeclaration;
    private filterEntry;
}
