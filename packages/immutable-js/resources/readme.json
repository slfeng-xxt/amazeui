"<h1 id=\"immutable-collections-for-javascript\">Immutable collections for JavaScript</h1>\n<p><a href=\"http://en.wikipedia.org/wiki/Immutable_object\">Immutable</a> data cannot be changed once created, leading to much simpler\napplication development, no defensive copying, and enabling advanced memoization\nand change detection techniques with simple logic. <a href=\"http://en.wikipedia.org/wiki/Persistent_data_structure\">Persistent</a> data presents\na mutative API which does not update the data in-place, but instead always\nyields new updated data.</p>\n<p>Immutable.js provides many Persistent Immutable data structures including:\n<code><a target=\"_self\" href=\"docs/#/List\">List</a></code>, <code><a target=\"_self\" href=\"docs/#/Stack\">Stack</a></code>, <code><a target=\"_self\" href=\"docs/#/Map\">Map</a></code>, <code><a target=\"_self\" href=\"docs/#/OrderedMap\">OrderedMap</a></code>, <code><a target=\"_self\" href=\"docs/#/Set\">Set</a></code>, <code><a target=\"_self\" href=\"docs/#/OrderedSet\">OrderedSet</a></code> and <code><a target=\"_self\" href=\"docs/#/Record\">Record</a></code>.</p>\n<p>These data structures are highly efficient on modern JavaScript VMs by using\nstructural sharing via <a href=\"http://en.wikipedia.org/wiki/Hash_array_mapped_trie\">hash maps tries</a> and <a href=\"http://hypirion.com/musings/understanding-persistent-vector-pt-1\">vector tries</a> as popularized\nby Clojure and Scala, minimizing the need to copy or cache data.</p>\n<p><code><span class=\"token qualifier\" >Immutable</span></code> also provides a lazy <code><a target=\"_self\" href=\"docs/#/Seq\">Seq</a></code>, allowing efficient\nchaining of collection methods like <code>map</code> and <code>filter</code> without creating\nintermediate representations. Create some <code><a target=\"_self\" href=\"docs/#/Seq\">Seq</a></code> with <code><a target=\"_self\" href=\"docs/#/Range\">Range</a></code> and <code><a target=\"_self\" href=\"docs/#/Repeat\">Repeat</a></code>.</p>\n<h2 id=\"getting-started\">Getting started</h2>\n<p>Install <code>immutable</code> using npm.</p>\n<code class=\"codeBlock\">npm install immutable</code><p>Then require it into any module.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> <span class=\"token qualifier\" >Immutable</span> <span class=\"token operator\" >=</span> <span class=\"token function\" >require<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nmap1<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>map2<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 50</span></code><h3 id=\"browser\">Browser</h3>\n<p>To use <code>immutable</code> from a browser, download <a href=\"https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js\">dist/immutable.min.js</a>\nor use a CDN such as <a href=\"https://cdnjs.com/libraries/immutable\">CDNJS</a>\nor <a href=\"http://www.jsdelivr.com/#!immutable.js\">jsDelivr</a>.</p>\n<p>Then, add it as a script tag to your page:</p>\n<code class=\"codeBlock\"><span class=\"token operator\" >&lt;</span>script src<span class=\"token operator\" >=</span><span class=\"token string\" >\"immutable.min.js\"</span><span class=\"token operator\" >></span><span class=\"token operator\" >&lt;</span><span class=\"token operator\" >/</span>script<span class=\"token operator\" >></span>\n<span class=\"token operator\" >&lt;</span>script<span class=\"token operator\" >></span>\n    <span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    <span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>    map2<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 50\n</span><span class=\"token operator\" >&lt;</span><span class=\"token operator\" >/</span>script<span class=\"token operator\" >></span></code><p>Or use an AMD loader (such as <a href=\"http://requirejs.org/\">RequireJS</a>):</p>\n<code class=\"codeBlock\"><span class=\"token function\" >require<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'./immutable.min.js'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    <span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>    map2<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 50\n</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>If you&#39;re using <a href=\"http://browserify.org/\">browserify</a>, the <code>immutable</code> npm module\nalso works from the browser.</p>\n<h3 id=\"typescript\">TypeScript</h3>\n<p>Use these Immutable collections and sequences as you would use native\ncollections in your <a href=\"http://typescriptlang.org\">TypeScript</a> programs while still taking\nadvantage of type generics, error detection, and auto-complete in your IDE.</p>\n<p>Just add a reference with a relative path to the type declarations at the top\nof your file.</p>\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/>\n</span><span class=\"token keyword\" >import</span> <span class=\"token qualifier\" >Immutable</span> <span class=\"token operator\" >=</span> <span class=\"token function\" >require<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map1<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Map</span><span class=\"token operator\" >&lt;</span>string<span class=\"token punctuation\" >,</span> number<span class=\"token operator\" >></span><span class=\"token punctuation\" >;</span>\nmap1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nmap1<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>map2<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 50</span></code><h2 id=\"the-case-for-immutability\">The case for Immutability</h2>\n<p>Much of what makes application development difficult is tracking mutation and\nmaintaining state. Developing with immutable data encourages you to think\ndifferently about how data flows through your application.</p>\n<p>Subscribing to data events throughout your application creates a huge overhead of\nbook-keeping which can hurt performance, sometimes dramatically, and creates\nopportunities for areas of your application to get out of sync with each other\ndue to easy to make programmer error. Since immutable data never changes,\nsubscribing to changes throughout the model is a dead-end and new data can only\never be passed from above.</p>\n<p>This model of data flow aligns well with the architecture of <a href=\"http://facebook.github.io/react/\">React</a>\nand especially well with an application designed using the ideas of <a href=\"http://facebook.github.io/flux/docs/overview.html\">Flux</a>.</p>\n<p>When data is passed from above rather than being subscribed to, and you&#39;re only\ninterested in doing work when something has changed, you can use equality.</p>\n<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While\nobjects represents some thing which could change over time, a value represents\nthe state of that thing at a particular instance of time. This principle is most\nimportant to understanding the appropriate use of immutable data. In order to\ntreat Immutable.js collections as values, it&#39;s important to use the\n<code><a target=\"_self\" href=\"docs/#/is\">Immutable.is()</a></code> function or <code><span class=\"token punctuation\" >.</span><span class=\"token function\" >equals<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> method to determine value equality\ninstead of the <code><span class=\"token operator\" >===</span></code> operator which determines object reference identity.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >equals<span class=\"token punctuation\" >(</span></span>map2<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map3 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >equals<span class=\"token punctuation\" >(</span></span>map3<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token primitive\" >false</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Note: As a performance optimization <code><span class=\"token qualifier\" >Immutable</span></code> attempts to return the existing\ncollection when an operation would result in an identical collection, allowing\nfor using <code><span class=\"token operator\" >===</span></code> reference equality to determine if something definitely has not\nchanged. This can be extremely useful when used within memoization function\nwhich would prefer to re-run the function if a deeper equality check could\npotentially be more costly. The <code><span class=\"token operator\" >===</span></code> equality check is also used internally by\n<code><a target=\"_self\" href=\"docs/#/is\">Immutable.is</a></code> and <code><span class=\"token punctuation\" >.</span><span class=\"token function\" >equals<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> as a performance optimization.</p>\n<p>If an object is immutable, it can be &quot;copied&quot; simply by making another reference\nto it instead of copying the entire object. Because a reference is much smaller\nthan the object itself, this results in memory savings and a potential boost in\nexecution speed for programs which rely on copies (such as an undo-stack).</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> clone <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >;</span></code><h2 id=\"javascript-first-api\">JavaScript-first API</h2>\n<p>While <code>immutable</code> is inspired by Clojure, Scala, Haskell and other functional\nprogramming environments, it&#39;s designed to bring these powerful concepts to\nJavaScript, and therefore has an Object-Oriented API that closely mirrors that\nof <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\">ES6</a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>.</p>\n<p>The difference for the immutable collections is that methods which would mutate\nthe collection, like <code>push</code>, <code><span class=\"token keyword\" >set</span></code>, <code>unshift</code> or <code>splice</code> instead return a new\nimmutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code>\ninstead return new immutable collections.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> list1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> list2 <span class=\"token operator\" >=</span> list1<span class=\"token punctuation\" >.</span><span class=\"token function\" >push<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> list3 <span class=\"token operator\" >=</span> list2<span class=\"token punctuation\" >.</span><span class=\"token function\" >unshift<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> list4 <span class=\"token operator\" >=</span> list1<span class=\"token punctuation\" >.</span><span class=\"token function\" >concat<span class=\"token punctuation\" >(</span></span>list2<span class=\"token punctuation\" >,</span> list3<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list1<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list2<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list3<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list4<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >13</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list4<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Almost all of the methods on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a> will be found in similar form on\n<code><a target=\"_self\" href=\"docs/#/List\">Immutable.List</a></code>, those of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a> found on <code><a target=\"_self\" href=\"docs/#/Map\">Immutable.Map</a></code>, and those of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>\nfound on <code><a target=\"_self\" href=\"docs/#/Set\">Immutable.Set</a></code>, including collection operations like <code><span class=\"token function\" >forEach<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code>\nand <code><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code>.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> alpha <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nalpha<span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >,</span> k<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> k<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 'A,B,C,D'</span></code><h3 id=\"accepts-raw-javascript-objects-\">Accepts raw JavaScript objects.</h3>\n<p>Designed to inter-operate with your existing JavaScript, <code>immutable</code>\naccepts plain JavaScript Arrays and Objects anywhere a method expects an\n<code><a target=\"_self\" href=\"docs/#/Iterable\">Iterable</a></code> with no performance penalty.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span><span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> t<span class=\"token punctuation\" >:</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> obj <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >100</span><span class=\"token punctuation\" >,</span> o<span class=\"token punctuation\" >:</span><span class=\"token number\" >200</span><span class=\"token punctuation\" >,</span> g<span class=\"token punctuation\" >:</span><span class=\"token number\" >300</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map3 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>map2<span class=\"token punctuation\" >,</span> obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }</span></code><p>This is possible because <code>immutable</code> can treat any JavaScript Array or Object\nas an Iterable. You can take advantage of this in order to get sophisticated\ncollection methods on JavaScript Objects, which otherwise have a very sparse\nnative API. Because Seq evaluates lazily and does not cache intermediate\nresults, these operations can be extremely efficient.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> myObject <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span>myObject<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// { a: 1, b: 4, c: 9 }</span></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a quote-less\nshorthand, while Immutable Maps accept keys of any type.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> obj <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"one\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token qualifier\" >Object</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >keys<span class=\"token punctuation\" >(</span></span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// [ \"1\" ]\n</span>obj<span class=\"token punctuation\" >[</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\"\n</span>obj<span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>   <span class=\"token comment\" spellcheck=\"true\">// \"one\"\n</span>\n<span class=\"token keyword\" >var</span> map <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nmap<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\"\n</span>map<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>   <span class=\"token comment\" spellcheck=\"true\">// undefined</span></code><p>Property access for JavaScript Objects first converts the key to a string, but\nsince Immutable Map keys can be of any type the argument to <code><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> is\nnot altered.</p>\n<h3 id=\"converts-back-to-raw-javascript-objects-\">Converts back to raw JavaScript objects.</h3>\n<p>All <code>immutable</code> Iterables can be converted to plain JavaScript Arrays and\nObjects shallowly with <code><span class=\"token function\" >toArray<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> and <code><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> or deeply with <code><span class=\"token function\" >toJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code>.\nAll Immutable Iterables also implement <code><span class=\"token function\" >toJSON<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> allowing them to be passed to\n<code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a></code> directly.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> deep <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeep<span class=\"token punctuation\" >.</span><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { a: 1, b: 2, c: List [ 3, 4, 5 ] }\n</span>deep<span class=\"token punctuation\" >.</span><span class=\"token function\" >toArray<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 1, 2, List [ 3, 4, 5 ] ]\n</span>deep<span class=\"token punctuation\" >.</span><span class=\"token function\" >toJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { a: 1, b: 2, c: [ 3, 4, 5 ] }\n</span>JSON<span class=\"token punctuation\" >.</span><span class=\"token function\" >stringify<span class=\"token punctuation\" >(</span></span>deep<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'</span></code><h3 id=\"embraces-es6\">Embraces ES6</h3>\n<p><code><span class=\"token qualifier\" >Immutable</span></code> takes advantage of features added to JavaScript in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\">ES6</a>,\nthe latest standard version of ECMAScript (JavaScript), including <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\">Iterators</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow Functions</a>, <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\">Classes</a>, and <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\">Modules</a>. It&#39;s also inspired by the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a> collections added to ES6. The library is &quot;transpiled&quot; to ES3\nin order to support all modern browsers.</p>\n<p>All examples are presented in ES6. To run in all browsers, they need to be\ntranslated to ES3.</p>\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// ES6\n</span>foo<span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ES3\n</span>foo<span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span><span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>x<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><h2 id=\"nested-structures\">Nested Structures</h2>\n<p>The collections in <code>immutable</code> are intended to be nested, allowing for deep\ntrees of data, similar to JSON.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> nested <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span><span class=\"token punctuation\" >{</span>c<span class=\"token punctuation\" >:</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }</span></code><p>A few power-tools allow for reading and operating on nested data. The\nmost useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code><a target=\"_self\" href=\"docs/#/List\">List</a></code>,\n<code><a target=\"_self\" href=\"docs/#/Map\">Map</a></code> and <code><a target=\"_self\" href=\"docs/#/OrderedMap\">OrderedMap</a></code>.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> nested2 <span class=\"token operator\" >=</span> nested<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeep<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span><span class=\"token punctuation\" >{</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }</span></code><code class=\"codeBlock\">nested2<span class=\"token punctuation\" >.</span><span class=\"token function\" >getIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 6\n</span>\n<span class=\"token keyword\" >var</span> nested3 <span class=\"token operator\" >=</span> nested2<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> value <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> value <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n</span>\n<span class=\"token keyword\" >var</span> nested4 <span class=\"token operator\" >=</span> nested3<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> list <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> list<span class=\"token punctuation\" >.</span><span class=\"token function\" >push<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }</span></code><h2 id=\"lazy-seq\">Lazy Seq</h2>\n<p><code><a target=\"_self\" href=\"docs/#/Seq\">Seq</a></code> describes a lazy operation, allowing them to efficiently chain\nuse of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>\n<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any mutative\nmethod called on a Seq will return a new Seq.</p>\n<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any\nmethod call.</p>\n<p>For example, the following does not perform any work, because the resulting\nSeq is never used:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> oddSquares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >7</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >8</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Once the Seq is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is called three times,\nand map is only called twice:</p>\n<code class=\"codeBlock\">console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log<span class=\"token punctuation\" >(</span></span>oddSquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 9</span></code><p>Any collection can be converted to a lazy Seq with <code><span class=\"token punctuation\" >.</span><span class=\"token function\" >toSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code>.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> seq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Seq allow for the efficient chaining of sequence operations, especially when\nconverting to a different concrete type (such as to a JS object):</p>\n<code class=\"codeBlock\">seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>key <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> key<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise seem memory-limited:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skip<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1000</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token operator\" >-</span>n<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >take<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >reduce<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>r<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> r <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1006008</span></code><p>Note: An iterable is always iterated in the same order, however that order may\nnot always be well defined, as is the case for the <code><a target=\"_self\" href=\"docs/#/Map\">Map</a></code>.</p>\n<h2 id=\"equality-treats-collections-as-data\">Equality treats Collections as Data</h2>\n<p><code><span class=\"token qualifier\" >Immutable</span></code> provides equality which treats immutable data structures as pure\ndata, performing a deep equality check if necessary.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1 <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// two different instances\n</span><span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >is<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// have equivalent values\n</span><span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >equals<span class=\"token punctuation\" >(</span></span>map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// alternatively use the equals method</span></code><p><code><a target=\"_self\" href=\"docs/#/is\">Immutable.is()</a></code> uses the same measure of equality as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">Object.is</a>\nincluding if both are immutable and all keys and values are equal\nusing the same measure of equality.</p>\n<h2 id=\"batching-mutations\">Batching Mutations</h2>\n<blockquote>\n<p>If a tree falls in the woods, does it make a sound?</p>\n<p>If a pure function mutates some local data in order to produce an immutable\nreturn value, is that ok?</p>\n<p>— Rich Hickey, Clojure</p>\n</blockquote>\n<p>Applying a mutation to create a new immutable object results in some overhead,\nwhich can add up to a minor performance penalty. If you need to apply a series\nof mutations locally before returning, <code><span class=\"token qualifier\" >Immutable</span></code> gives you the ability to\ncreate a temporary mutable (transient) copy of a collection and apply a batch of\nmutations in a performant manner by using <code>withMutations</code>. In fact, this is\nexactly how  <code><span class=\"token qualifier\" >Immutable</span></code> applies complex mutations itself.</p>\n<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new\nimmutable Lists.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> list1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> list2 <span class=\"token operator\" >=</span> list1<span class=\"token punctuation\" >.</span><span class=\"token function\" >withMutations<span class=\"token punctuation\" >(</span></span><span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>list<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  list<span class=\"token punctuation\" >.</span><span class=\"token function\" >push<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >push<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >push<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list1<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>list2<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Note: <code>immutable</code> also provides <code>asMutable</code> and <code>asImmutable</code>, but only\nencourages their use when <code>withMutations</code> will not suffice. Use caution to not\nreturn a mutable copy, which could result in undesired behavior.</p>\n<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including\n<code><span class=\"token keyword\" >set</span></code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a\npersistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,\nand <code>splice</code> will always return new immutable data-structures and never mutate\na mutable collection.</p>\n<h2 id=\"documentation\">Documentation</h2>\n<p><a href=\"http://facebook.github.io/immutable-js/docs/\">Read the docs</a> and eat your vegetables.</p>\n<p>Docs are automatically generated from <a href=\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\">Immutable.d.ts</a>.\nPlease contribute!</p>\n<p>Also, don&#39;t miss the <a href=\"https://github.com/facebook/immutable-js/wiki\">Wiki</a> which\ncontains articles on specific topics. Can&#39;t find something? Open an <a href=\"https://github.com/facebook/immutable-js/issues\">issue</a>.</p>\n<h2 id=\"contribution\">Contribution</h2>\n<p>Use <a href=\"https://github.com/facebook/immutable-js/issues\">Github issues</a> for requests.</p>\n<p>We actively welcome pull requests, learn how to <a href=\"./CONTRIBUTING.md\">contribute</a>.</p>\n<h2 id=\"changelog\">Changelog</h2>\n<p>Changes are tracked as <a href=\"https://github.com/facebook/immutable-js/releases\">Github releases</a>.</p>\n<h2 id=\"thanks\">Thanks</h2>\n<p><a href=\"https://www.youtube.com/watch?v=K2NYwP90bNs\">Phil Bagwell</a>, for his inspiration\nand research in persistent data structures.</p>\n<p><a href=\"https://github.com/hughfdjackson/\">Hugh Jackson</a>, for providing the npm package\nname. If you&#39;re looking for his unsupported package, see <a href=\"https://www.npmjs.org/package/immutable/1.4.1\">v1.4.1</a>.</p>\n<h2 id=\"license\">License</h2>\n<p><code><span class=\"token qualifier\" >Immutable</span></code> is <a href=\"./LICENSE\">BSD-licensed</a>. We also provide an additional <a href=\"./PATENTS\">patent grant</a>.</p>\n"